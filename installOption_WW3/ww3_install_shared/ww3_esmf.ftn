!/ ------------------------------------------------------------------- /
#include "w3macros.h"
      MODULE WW3_ESMF
      PUBLIC W3_TEST
      PUBLIC W3_INIT
      PUBLIC W3_RUN
      PUBLIC GET_DOMAIN_SIZE
      PUBLIC GET_GRID_PARAMETERS
      PUBLIC GET_HS
      PUBLIC GET_WIND_FIELDS
      PUBLIC PUT_WIND_FIELDS
      CONTAINS

      SUBROUTINE W3_TEST
      PRINT *, "TEST WAVE WATCH III..."
      END SUBROUTINE W3_TEST

      SUBROUTINE GET_DOMAIN_SIZE(meshNX, meshNY, IP, NP)
        USE W3GDATMD
        USE W3ODATMD, ONLY: NAPROC, IAPROC
        INTEGER :: meshNX, meshNY
        INTEGER :: IP, NP

        meshNX = NX
        meshNY = NY
        IP = IAPROC
        NP = NAPROC

      END SUBROUTINE GET_DOMAIN_SIZE

      SUBROUTINE GET_GRID_PARAMETERS(meshXGRD, meshYGRD)
        USE W3GDATMD
        INTEGER :: meshNX, meshNY
        INTEGER :: I, J
        REAL*8 meshXGRD(NY,NX)
        REAL*8 meshYGRD(NY,NX)

        meshNX = NX
        meshNY = NY
        DO I = 1, NX
          DO J = 1, NY
            meshXGRD(J,I) = XGRD(J,I)
            meshYGRD(J,I) = YGRD(J,I)
          ENDDO
        ENDDO

      END SUBROUTINE GET_GRID_PARAMETERS

      SUBROUTINE GET_HS(MYCOMM, LOCALPET, HS_ESMF, ML_ESMF, WN_ESMF, &
                        WAVEMASK_ESMF, WAVESTOKESX_ESMF, &
                        WAVESTOKESY_ESMF, WAVELANGMUIR_ESMF, &
                        WAVELASL_ESMF, &
                        WAVETAUIX_ESMF, WAVETAUIY_ESMF, &
                        WAVETAUOX_ESMF, WAVETAUOY_ESMF, &
                        WAVENP, WAVEXLOW, WAVEYLOW, &
                        WAVEXHIGH, WAVEYHIGH, WAVESNX, WAVESNY)
        USE W3GDATMD, ONLY: NSEA, NX, NY, MAPSF, MAPFS, MAPSTA, MAPST2
        USE W3ADATMD, ONLY: HS, WLM, FP0, USSX, USSY, LAMULT, LASL
        USE W3ADATMD, ONLY: TUSX, TUSY
        USE W3ADATMD, ONLY: TAUWIX, TAUWIY, TAUOX, TAUOY
        USE W3SERVMD, ONLY: W3S2XY
        USE W3ODATMD, ONLY: UNDEF, NDSE, NDST, NDSO, NAPROC, IAPROC
        USE CONSTANTS, ONLY: DWAT    ! gravity, density of water
        INTEGER :: MYCOMM
        INTEGER :: LOCALPET
        INTEGER :: I, J, WAVENP
        INTEGER :: I_LOCAL, I_GLOBAL
        REAL*8 HS_ESMF(NX,NY), ML_ESMF(NX,NY), WN_ESMF(NX,NY)
        REAL*8 WAVEMASK_ESMF(NX,NY)
        REAL*8 WAVESTOKESX_ESMF(NX,NY), WAVESTOKESY_ESMF(NX,NY)
        REAL*8 WAVELANGMUIR_ESMF(NX,NY), WAVELASL_ESMF(NX,NY)
        REAL*8 WAVETAUIX_ESMF(NX,NY), WAVETAUIY_ESMF(NX,NY)
        REAL*8 WAVETAUOX_ESMF(NX,NY), WAVETAUOY_ESMF(NX,NY)
        REAL HS_GLOBAL(1:NSEA), HS_LOCAL(1:NSEA)
        REAL ML_GLOBAL(1:NSEA), ML_LOCAL(1:NSEA)
        REAL WN_GLOBAL(1:NSEA), WN_LOCAL(1:NSEA)
        REAL STOKESX_GLOBAL(1:NSEA), STOKESX_LOCAL(1:NSEA)
        REAL STOKESY_GLOBAL(1:NSEA), STOKESY_LOCAL(1:NSEA)
        REAL LANGM_GLOBAL(1:NSEA), LANGM_LOCAL(1:NSEA)
        REAL LASL_GLOBAL(1:NSEA), LASL_LOCAL(1:NSEA)
        REAL TAUIX_GLOBAL(1:NSEA), TAUIX_LOCAL(1:NSEA)
        REAL TAUIY_GLOBAL(1:NSEA), TAUIY_LOCAL(1:NSEA)
        REAL TAUOX_GLOBAL(1:NSEA), TAUOX_LOCAL(1:NSEA)
        REAL TAUOY_GLOBAL(1:NSEA), TAUOY_LOCAL(1:NSEA)
        REAL HS_XYGRID(NX+1,NY), ML_XYGRID(NX+1,NY), WN_XYGRID(NX+1,NY)
        REAL STOKESX_XYGRID(NX+1,NY), STOKESY_XYGRID(NX+1,NY)
        REAL LANGM_XYGRID(NX+1,NY), LASL_XYGRID(NX+1,NY)
        REAL TAUIX_XYGRID(NX+1,NY), TAUIY_XYGRID(NX+1,NY)
        REAL TAUOX_XYGRID(NX+1,NY), TAUOY_XYGRID(NX+1,NY)
        INTEGER WAVEXLOW(0:WAVENP-1)
        INTEGER WAVEYLOW(0:WAVENP-1)
        INTEGER WAVEXHIGH(0:WAVENP-1)
        INTEGER WAVEYHIGH(0:WAVENP-1)
        INTEGER WAVESNX(0:WAVENP-1)
        INTEGER WAVESNY(0:WAVENP-1)
        REAL*8 SMALL
        INCLUDE "mpif.h"

        ! how many local grid points in WW3
        ! NSEA_LOCAL = (NSEA-0.1)/(WAVENP) + 1
        SMALL = 1E-12

        DO I_GLOBAL = 1, NSEA
          HS_LOCAL(I_GLOBAL) = 0.d0
          HS_GLOBAL(I_GLOBAL) = 0.d0
          ML_LOCAL(I_GLOBAL) = 0.d0
          ML_GLOBAL(I_GLOBAL) = 0.d0
          WN_LOCAL(I_GLOBAL) = 0.d0
          WN_GLOBAL(I_GLOBAL) = 0.d0
          STOKESX_LOCAL(I_GLOBAL) = 0.d0
          STOKESX_GLOBAL(I_GLOBAL) = 0.d0
          STOKESY_LOCAL(I_GLOBAL) = 0.d0
          STOKESY_GLOBAL(I_GLOBAL) = 0.d0
          LANGM_LOCAL(I_GLOBAL) = 0.d0
          LANGM_GLOBAL(I_GLOBAL) = 0.d0
          LASL_LOCAL(I_GLOBAL) = 0.d0
          LASL_GLOBAL(I_GLOBAL) = 0.d0
          TAUIX_LOCAL(I_GLOBAL) = 0.d0
          TAUIX_GLOBAL(I_GLOBAL) = 0.d0
          TAUIY_LOCAL(I_GLOBAL) = 0.d0
          TAUIY_GLOBAL(I_GLOBAL) = 0.d0
          TAUOX_LOCAL(I_GLOBAL) = 0.d0
          TAUOX_GLOBAL(I_GLOBAL) = 0.d0
          TAUOY_LOCAL(I_GLOBAL) = 0.d0
          TAUOY_GLOBAL(I_GLOBAL) = 0.d0
        ENDDO

        ! how many local grid points in WW3
        NSEAL = 1 + (NSEA-IAPROC)/NAPROC
        DO I_LOCAL = 1, NSEAL
          IF (LOCALPET .lt. (WAVENP-1)) THEN
            ! I_GLOBAL = I_LOCAL*(WAVENP-1) + LOCALPET - 2
            I_GLOBAL   = IAPROC + (I_LOCAL-1)*NAPROC
            HS_LOCAL(I_GLOBAL) = MAX(HS(I_LOCAL),0.0d0)
            ! ML_LOCAL(I_GLOBAL) = MAX(WLM(I_LOCAL),0.0d0)
            ML_LOCAL(I_GLOBAL) = 9.81/6.2831853            &
                                 /MAX(FP0(I_LOCAL),1E-5)**2
            WN_LOCAL(I_GLOBAL) = (USSX(I_LOCAL)**2         &
                                 +USSY(I_LOCAL)**2)**0.5   &
                                 /2.0/((TUSX(I_LOCAL)**2   &
                                 +TUSY(I_LOCAL)**2)**0.5 + SMALL)
            STOKESX_LOCAL(I_GLOBAL) = USSX(I_LOCAL)
            STOKESY_LOCAL(I_GLOBAL) = USSY(I_LOCAL)
            LANGM_LOCAL(I_GLOBAL) = MAX(LAMULT(I_LOCAL),0.0d0)
            LASL_LOCAL(I_GLOBAL) = LASL(I_LOCAL)
            TAUIX_LOCAL(I_GLOBAL) = DWAT*TAUWIX(I_LOCAL)
            TAUIY_LOCAL(I_GLOBAL) = DWAT*TAUWIY(I_LOCAL)
            TAUOX_LOCAL(I_GLOBAL) = DWAT*TAUOX(I_LOCAL)
            TAUOY_LOCAL(I_GLOBAL) = DWAT*TAUOY(I_LOCAL)
          ENDIF
        ENDDO

        DO I_GLOBAL = 1, NSEA
          IF (STOKESY_LOCAL(I_GLOBAL) .LT. (-999.9+10)) THEN
            STOKESX_LOCAL(I_GLOBAL) = 0.d0
            STOKESY_LOCAL(I_GLOBAL) = 0.d0
            LANGM_LOCAL(I_GLOBAL) = 1.d0
            LASL_LOCAL(I_GLOBAL) = 0.d0
            TAUIX_LOCAL(I_GLOBAL) = 0.d0
            TAUIY_LOCAL(I_GLOBAL) = 0.d0
            TAUOX_LOCAL(I_GLOBAL) = 0.d0
            TAUOY_LOCAL(I_GLOBAL) = 0.d0
          ENDIF
        ENDDO

        DO I_GLOBAL = 1, NSEA
          IF (TAUIX_LOCAL(I_GLOBAL) .LT. (-999.9+10)) THEN
            TAUIX_LOCAL(I_GLOBAL) = 0.d0
            TAUIY_LOCAL(I_GLOBAL) = 0.d0
            TAUOX_LOCAL(I_GLOBAL) = 0.d0
            TAUOY_LOCAL(I_GLOBAL) = 0.d0
          ENDIF
        ENDDO

        !! PRINT *, "HS is: ", HS
        !! PRINT *, "WLM is: ", WLM
        !! PRINT *, "STOKESX is: ", STOKESX
        !! PRINT *, "STOKESY is: ", STOKESY

        CALL MPI_ALLREDUCE(HS_LOCAL,HS_GLOBAL,NSEA,MPI_REAL,MPI_SUM,MYCOMM,ierr)
        CALL MPI_ALLREDUCE(ML_LOCAL,ML_GLOBAL,NSEA,MPI_REAL,MPI_SUM,MYCOMM,ierr)
        CALL MPI_ALLREDUCE(WN_LOCAL,WN_GLOBAL,NSEA,MPI_REAL,MPI_SUM,MYCOMM,ierr)
        CALL MPI_ALLREDUCE(STOKESX_LOCAL,STOKESX_GLOBAL,NSEA,MPI_REAL,MPI_SUM,MYCOMM,ierr)
        CALL MPI_ALLREDUCE(STOKESY_LOCAL,STOKESY_GLOBAL,NSEA,MPI_REAL,MPI_SUM,MYCOMM,ierr)
        CALL MPI_ALLREDUCE(LANGM_LOCAL,LANGM_GLOBAL,NSEA,MPI_REAL,MPI_SUM,MYCOMM,ierr)
        CALL MPI_ALLREDUCE(LASL_LOCAL,LASL_GLOBAL,NSEA,MPI_REAL,MPI_SUM,MYCOMM,ierr)
        CALL MPI_ALLREDUCE(TAUIX_LOCAL,TAUIX_GLOBAL,NSEA,MPI_REAL,MPI_SUM,MYCOMM,ierr)
        CALL MPI_ALLREDUCE(TAUIY_LOCAL,TAUIY_GLOBAL,NSEA,MPI_REAL,MPI_SUM,MYCOMM,ierr)
        CALL MPI_ALLREDUCE(TAUOX_LOCAL,TAUOX_GLOBAL,NSEA,MPI_REAL,MPI_SUM,MYCOMM,ierr)
        CALL MPI_ALLREDUCE(TAUOY_LOCAL,TAUOY_GLOBAL,NSEA,MPI_REAL,MPI_SUM,MYCOMM,ierr)

        CALL W3S2XY ( NSEA, NSEA, NX+1, NY, HS_GLOBAL, MAPSF, HS_XYGRID )
        CALL W3S2XY ( NSEA, NSEA, NX+1, NY, ML_GLOBAL, MAPSF, ML_XYGRID )
        CALL W3S2XY ( NSEA, NSEA, NX+1, NY, WN_GLOBAL, MAPSF, WN_XYGRID )
        CALL W3S2XY ( NSEA, NSEA, NX+1, NY, STOKESX_GLOBAL, MAPSF, STOKESX_XYGRID )
        CALL W3S2XY ( NSEA, NSEA, NX+1, NY, STOKESY_GLOBAL, MAPSF, STOKESY_XYGRID )
        CALL W3S2XY ( NSEA, NSEA, NX+1, NY, LANGM_GLOBAL, MAPSF, LANGM_XYGRID )
        CALL W3S2XY ( NSEA, NSEA, NX+1, NY, LASL_GLOBAL, MAPSF, LASL_XYGRID )
        CALL W3S2XY ( NSEA, NSEA, NX+1, NY, TAUIX_GLOBAL, MAPSF, TAUIX_XYGRID )
        CALL W3S2XY ( NSEA, NSEA, NX+1, NY, TAUIY_GLOBAL, MAPSF, TAUIY_XYGRID )
        CALL W3S2XY ( NSEA, NSEA, NX+1, NY, TAUOX_GLOBAL, MAPSF, TAUOX_XYGRID )
        CALL W3S2XY ( NSEA, NSEA, NX+1, NY, TAUOY_GLOBAL, MAPSF, TAUOY_XYGRID )

        DO I = 1, NX
          DO J = 1, NY
            HS_ESMF(I,J) = HS_XYGRID(I,J)
            ML_ESMF(I,J) = ML_XYGRID(I,J)
            WN_ESMF(I,J) = WN_XYGRID(I,J)
            WAVESTOKESX_ESMF(I,J) = STOKESX_XYGRID(I,J)
            WAVESTOKESY_ESMF(I,J) = STOKESY_XYGRID(I,J)
            WAVELANGMUIR_ESMF(I,J) = LANGM_XYGRID(I,J)
            WAVELASL_ESMF(I,J) = LASL_XYGRID(I,J)
            WAVETAUIX_ESMF(I,J) = TAUIX_XYGRID(I,J)
            WAVETAUIY_ESMF(I,J) = TAUIY_XYGRID(I,J)
            WAVETAUOX_ESMF(I,J) = TAUOX_XYGRID(I,J)
            WAVETAUOY_ESMF(I,J) = TAUOY_XYGRID(I,J)

            WAVEMASK_ESMF(I,J) = MAPSTA(J,I)
            IF ( MAPSTA(J,I) .EQ. 0 ) THEN
              HS_ESMF(I,J) = 0.d0
              ML_ESMF(I,J) = 0.d0
              WN_ESMF(I,J) = 0.d0
              WAVESTOKESX_ESMF(I,J) = 0.d0
              WAVESTOKESY_ESMF(I,J) = 0.d0
              WAVELANGMUIR_ESMF(I,J) = 1.d0
              WAVELASL_ESMF(I,J) = 0.d0
              WAVETAUIX_ESMF(I,J) = 0.d0
              WAVETAUIY_ESMF(I,J) = 0.d0
              WAVETAUOX_ESMF(I,J) = 0.d0
              WAVETAUOY_ESMF(I,J) = 0.d0
            END IF
          ENDDO
        ENDDO
        
        !! PRINT *, "TAU X is: ", TAUWIX_ESMF
        !! PRINT *, "TAU Y is: ", TAUWIY_ESMF
        !! PRINT *, "MAPSTA is: ", MAPSTA

      END SUBROUTINE GET_HS

      SUBROUTINE PUT_WIND_FIELDS(MYCOMM, UWIND0, VWIND0, UWINDN, VWINDN, &
                                 UCURR0, VCURR0, UCURRN, VCURRN, OCNMLD, &
                                 WAVENP, WAVEXLOW, WAVEYLOW, &
                                 WAVEXHIGH, WAVEYHIGH, WAVESNX, WAVESNY)
        USE W3GDATMD
        USE W3IDATMD
        USE W3ODATMD, ONLY: NAPROC, IAPROC
        INTEGER :: MYCOMM
        INTEGER :: I, J, WAVENP, IG, JG
        REAL*8 UWIND0(NX,NY)
        REAL*8 UWINDLOCAL(NX,NY)
        REAL*8 VWIND0(NX,NY)
        REAL*8 VWINDLOCAL(NX,NY)
        REAL*8 UWINDN(NX,NY)
        REAL*8 VWINDN(NX,NY)
        REAL*8 UCURR0(NX,NY)
        REAL*8 UCURRLOCAL(NX,NY)
        REAL*8 VCURR0(NX,NY)
        REAL*8 VCURRLOCAL(NX,NY)
        REAL*8 UCURRN(NX,NY)
        REAL*8 VCURRN(NX,NY)
        REAL*8 OCNMLD(NX,NY)
        REAL*8 OCNMLDLOCAL(NX,NY)
        INTEGER WAVEXLOW(0:WAVENP-1)
        INTEGER WAVEYLOW(0:WAVENP-1)
        INTEGER WAVEXHIGH(0:WAVENP-1)
        INTEGER WAVEYHIGH(0:WAVENP-1)
        INTEGER WAVESNX(0:WAVENP-1)
        INTEGER WAVESNY(0:WAVENP-1)
        INTEGER ierr

        INCLUDE "mpif.h"

        DO I = 1, NX
          DO J = 1, NY
            UWINDLOCAL(I,J) = 0d0
            VWINDLOCAL(I,J) = 0d0
            UCURRLOCAL(I,J) = 0d0
            VCURRLOCAL(I,J) = 0d0
            OCNMLDLOCAL(I,J) = 5.
          ENDDO
        ENDDO

        DO I = 1, WAVESNX(IAPROC-1)
          DO J = 1, WAVESNY(IAPROC-1)
            IG = WAVEXLOW(IAPROC-1) - 1 + I
            JG = WAVEYLOW(IAPROC-1) - 1 + J
            UWINDLOCAL(IG,JG) = UWIND0(IG,JG)
            VWINDLOCAL(IG,JG) = VWIND0(IG,JG)
            UCURRLOCAL(IG,JG) = UCURR0(IG,JG)
            VCURRLOCAL(IG,JG) = VCURR0(IG,JG)
            OCNMLDLOCAL(IG,JG) = OCNMLD(IG,JG)
          ENDDO
        ENDDO

        CALL MPI_ALLREDUCE(UWINDLOCAL,UWIND0,NX*NY,MPI_REAL8,MPI_SUM,&
                   MYCOMM,ierr)
        CALL MPI_ALLREDUCE(VWINDLOCAL,VWIND0,NX*NY,MPI_REAL8,MPI_SUM,&
                   MYCOMM,ierr)
        CALL MPI_ALLREDUCE(UCURRLOCAL,UCURR0,NX*NY,MPI_REAL8,MPI_SUM,&
                   MYCOMM,ierr)
        CALL MPI_ALLREDUCE(VCURRLOCAL,VCURR0,NX*NY,MPI_REAL8,MPI_SUM,&
                   MYCOMM,ierr)
        CALL MPI_ALLREDUCE(OCNMLDLOCAL,OCNMLD,NX*NY,MPI_REAL8,MPI_SUM,&
                   MYCOMM,ierr)

        DO I = 1, NX
          DO J = 1, NY
            WX0(I,J) = UWIND0(I,J)
            WY0(I,J) = VWIND0(I,J)
            WXN(I,J) = UWIND0(I,J)
            WYN(I,J) = VWIND0(I,J)
            CX0(I,J) = UCURR0(I,J)
            CY0(I,J) = VCURR0(I,J)
            CXN(I,J) = UCURR0(I,J)
            CYN(I,J) = VCURR0(I,J)
            !! TODO:: add the ocn mld to ww3 
            !! TODO:: set minimum hml = 5.0 m
            HML(I,J) = max(OCNMLD(I,J),5.0)
            
          ENDDO
        ENDDO

        !! PRINT *, "WW3 WX0 is  : ", WX0
        !! PRINT *, "WW3 WY0 is  : ", WY0
        !! PRINT *, "WW3 WXN is  : ", WXN
        !! PRINT *, "WW3 WYN is  : ", WYN
        !! PRINT *, "wavewatch wind fields updated.."

      END SUBROUTINE PUT_WIND_FIELDS

      SUBROUTINE GET_WIND_FIELDS(UWIND0, VWIND0, UWINDN, VWINDN)
        USE W3GDATMD
        USE W3IDATMD
        INTEGER :: I, J
        REAL*8 UWIND0(NX,NY)
        REAL*8 VWIND0(NX,NY)
        REAL*8 UWINDN(NX,NY)
        REAL*8 VWINDN(NX,NY)

        DO I = 1, NX
          DO J = 1, NY
            UWIND0(I,J) = WX0(I,J)
            VWIND0(I,J) = WY0(I,J)
            UWINDN(I,J) = WXN(I,J)
            VWINDN(I,J) = WYN(I,J)
          ENDDO
        ENDDO

      END SUBROUTINE GET_WIND_FIELDS

      SUBROUTINE W3_INIT(myComm)

      USE W3GDATMD
      USE W3WDATMD, ONLY: TIME, W3NDAT, W3DIMW, W3SETW
!/OASIS      USE W3WDATMD, ONLY: TIME00, TIMEEND
      USE W3ADATMD, ONLY: W3NAUX, W3DIMA, W3SETA
      USE W3ADATMD, ONLY: DW, HSIG, UA, UD
      USE W3SERVMD, ONLY: W3S2XY
      USE W3IDATMD
!/OASIS      USE W3ODATMD, ONLY: DTOUT
      USE W3ODATMD, ONLY: W3NOUT, W3SETO
      USE W3ODATMD, ONLY: NAPROC, IAPROC, NAPOUT, NAPERR, NOGRP,      &
                          NGRPP, IDOUT, FNMPRE, IOSTYP, NOTYPE, NOGE
!/
      USE W3FLDSMD
      USE W3INITMD
      USE W3WAVEMD
      USE W3WDASMD
!/
      USE W3IOGRMD, ONLY: W3IOGR
      USE W3IOGOMD, ONLY: W3READFLGRD, FLDOUT
      USE W3IOPOMD
      USE W3SERVMD, ONLY: NEXTLN, EXTCDE
      USE W3TIMEMD
      USE W3ODATMD, ONLY: UNDEF


!/NCC      USE WW_cc, ONLY: MPI_COMM_WW
!/OASIS USE W3OACPMD, ONLY: CPL_OASIS_INIT, CPL_OASIS_GRID,            &
!/OASIS                     CPL_OASIS_DEFINE, CPL_OASIS_FINALIZE,      &
!/OASIS                     ID_OASIS_TIME
!/TIDE      USE W3TIDEMD
!
      IMPLICIT NONE
!
!/MPI      INCLUDE "mpif.h"
!/PALM     INCLUDE "palmlib.h"
!/
!/ ------------------------------------------------------------------- /
!/ Local PARAMETER statements
!/
      INTEGER  :: myComm
      INTEGER, PARAMETER  :: NHMAX =    200
!/
!/ ------------------------------------------------------------------- /
!/ Local parameters
!/
!/OASIS INTEGER :: OASISED
!/PALM  INTEGER :: PALMED
      INTEGER             :: ISEA
      INTEGER             :: NDSI, NDSI2, NDSS, NDSO, NDSE, NDST,     &
                             NDSF(-7:7), NDSEN, NDS(13), NTRACE(2),   &
                             TIME0(2), TIMEN(2), TTIME(2), TTT(2),    &
                             IERR, J, I, ODAT(35), ILOOP, NPTS,       &
                             NH(-7:4), THO(2,-7:4,NHMAX), RCLD(5:7),  &
                             NDT(5:7), NDTNEW, MPI_COMM = -99, JJ,    &
                             IPRT(6) = 0, IFI, IFJ
!/COU      INTEGER             :: OFL
!/F90      INTEGER             :: CLKDT1(8), CLKDT2(8), CLKDT3(8) 
!/MPI      INTEGER             :: IERR_MPI
      INTEGER             :: NODATA(5:7), FLAGTIDE
      INTEGER             :: COUPL_COMM
      REAL                :: FACTOR, DTTST, XX, YY,                   &
                             HA(NHMAX,-7:4), HD(NHMAX,-7:4),          &
                             HS(NHMAX,-7:4)

!/F90      REAL                :: CLKFIN, CLKFEL
      REAL, ALLOCATABLE   :: X(:), Y(:), XXX(:,:), DATA0(:,:),        &
                             DATA1(:,:), DATA2(:,:)
      REAL, ALLOCATABLE   :: XY(:,:)
      LOGICAL             :: FLLSTL, FLLSTI, FLH(-7:8), FLFLG, FLHOM, &
                             TFLAGI, FLGDAS(3), FLGRD(NOGRP,NGRPP),   &
                             FLT, FLGD(NOGRP)
      LOGICAL             :: FLGR2(NOGRP,NGRPP), FLG2(NOGRP)
      LOGICAL             :: FLAGSTIDE(4)
      LOGICAL             :: PRTFRM
      LOGICAL             :: FLLST_ALL(-7:8)
      LOGICAL             :: DEBUG_NCC = .FALSE.
!/NCC      LOGICAL             :: CFLAG(10) 
!/OASIS LOGICAL                 :: L_MASTER    

      CHARACTER(LEN=1)    :: COMSTR,FLAGTFC
      CHARACTER(LEN=3)    :: IDSTR(-7:8), IDTST
      CHARACTER(LEN=6)    :: YESXNO
      CHARACTER(LEN=10)   :: PN
      CHARACTER(LEN=10),                                              &
              ALLOCATABLE :: PNAMES(:)
      CHARACTER(LEN=13)   :: IDFLDS(-7:8)
      CHARACTER(LEN=20)   :: STRNG
      CHARACTER(LEN=23)   :: DTME21
      CHARACTER(LEN=30)   :: IDOTYP(7)
      CHARACTER(LEN=80)   :: LINE
      CHARACTER(LEN=1024) :: FLDIN
!/COU      CHARACTER(LEN=30)       :: OFILE
!/
!/ ------------------------------------------------------------------- /
!/
      DATA IDFLDS / 'ice param. 1 ' , 'ice param. 2 ' ,               &
                    'ice param. 3 ' , 'ice param. 4 ' ,               &
                    'ice param. 5 ' ,                                 &
                    'mud density  ' , 'mud thkness  ' ,               &
                    'mud viscos.  ' ,                                 &
                    'water levels ' , 'currents     ' ,               &
                    'winds        ' , 'ice fields   ' ,               &
                    'mean param.  ' , '1D spectra   ' ,               &
                    '2D spectra   ' , 'moving grid  ' /
      DATA IDOTYP / 'Fields of mean wave parameters' ,                &
                    'Point output                  ' ,                &
                    'Track point output            ' ,                &
                    'Restart files                 ' ,                &
                    'Nesting data                  ' ,                &
                    'Partitioned wave field data   ' ,                &
                    'Fields for coupling           ' /
      DATA IDSTR  / 'IC1', 'IC2', 'IC3', 'IC4', 'IC5', 'MDN', 'MTH',  &
                    'MVS', 'LEV', 'CUR', 'WND', 'ICE', 'DT0', 'DT1',  &
                    'DT2', 'MOV' /
      PRINT *, "RUN WAVE WATCH III..."
!
!     IF (FLAGLL) THEN
!         FACTOR = 1.
!       ELSE
!         FACTOR = 1.E-3
!       END IF
!
      FLAGSTIDE(:) = .FALSE.
      FLH(:)       = .FALSE.
!
!/T      PRTFRM = .TRUE.
!/T      DEBUG_NCC = .TRUE. 
!
!/F90      CALL DATE_AND_TIME ( VALUES=CLKDT1 )
!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! 0.  Set up data structures
!
!/PALM      PALMED=1
!/OASIS     OASISED=1
!  
      CALL W3NMOD ( 1, 6, 6 )
      CALL W3NDAT (    6, 6 )
      CALL W3NAUX (    6, 6 )
      CALL W3NOUT (    6, 6 )
      CALL W3NINP (    6, 6 )
!
      CALL W3SETG ( 1, 6, 6 )
      CALL W3SETW ( 1, 6, 6 )
      CALL W3SETA ( 1, 6, 6 )
      CALL W3SETO ( 1, 6, 6 )
      CALL W3SETI ( 1, 6, 6 )

      DO I = 1, 500
        PRINT *, "before setting MPI"
      ENDDO
!
!/SHRD      NAPROC = 1
!/SHRD      IAPROC = 1
!
!/OASIS IF (OASISED.EQ.1) THEN
!/OASIS   CALL CPL_OASIS_INIT(MPI_COMM)
!/OASIS ELSE
!/PALM  IF (PALMED.EQ.0) THEN 
!! !/MPI      CALL MPI_INIT      ( IERR_MPI )
!/MPI      MPI_COMM = myComm
!/PALM  ELSE
!/PALM ! what if PALM but not MPI ???
!/PALM      MPI_COMM = PL_COMM_EXEC
!/PALM  ENDIF
!/OASIS END IF
!
!/NCC      CALL WW_CMP_START
!/NCC      MPI_COMM = MPI_COMM_WW
!
!/MPI      CALL MPI_COMM_SIZE ( MPI_COMM, NAPROC, IERR_MPI )
!/MPI      CALL MPI_COMM_RANK ( MPI_COMM, IAPROC, IERR_MPI )
!/MPI      IAPROC = IAPROC + 1
!
!/NCO/!     IF ( IAPROC .EQ. 1 ) CALL W3TAGB                         &
!/NCO/!                         ('WAVEFCST',1998,0007,0050,'NP21   ')
!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! 1.  IO set-up
! 1.a For shell
!
      NDSI   = 10
      NDSS   = 90
      NDSO   =  6
      NDSE   =  6
      NDST   =  6
!/COU      NDSO   =  333
!/COU      NDSE   =  333
!/COU      NDST   =  333


      NDSF(-7)  = 1008
      NDSF(-6)  = 1009
      NDSF(-5)  = 1010
      NDSF(-4)  = 1011
      NDSF(-3)  = 1012
      NDSF(-2)  = 1013
      NDSF(-1)  = 1014
      NDSF(0)   = 1015

      NDSF(1)  = 11
      NDSF(2)  = 12
      NDSF(3)  = 13
      NDSF(4)  = 14
      NDSF(5)  = 15
      NDSF(6)  = 16
      NDSF(7)  = 17
!
!/NCO/!
!/NCO/! Redo according to NCO
!/NCO/!
!/NCO      NDSI   = 11
!/NCO      NDSS   = 90
!/NCO      NDSO   =  6
!/NCO      NDSE   = NDSO
!/NCO      NDST   = NDSO
!/NCO      NDSF(1)  = 12
!/NCO      NDSF(2)  = 13
!/NCO      NDSF(3)  = 14
!/NCO      NDSF(4)  = 15
!/NCO      NDSF(5)  = 16
!/NCO      NDSF(6)  = 17
!/NCO      NDSF(7)  = 18
!
      NAPOUT = 1
      NAPERR = 1
!
!/COU      OFILE  = 'output.ww3'
!/COU      OFL    = LEN_TRIM(OFILE)
!/COU      J      = LEN_TRIM(FNMPRE)
!/COU      IF ( IAPROC .EQ. NAPOUT )             &
!/COU        OPEN (333,FILE=FNMPRE(:J)//OFILE(:OFL),ERR=2008,IOSTAT=IERR)

      IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,900)
!
      IF ( IAPROC .EQ. NAPERR ) THEN
          NDSEN  = NDSE
        ELSE
          NDSEN  = -1
        END IF
!
      JJ     = LEN_TRIM(FNMPRE)
      OPEN (NDSI,FILE=FNMPRE(:JJ)//'ww3_shel.inp',STATUS='OLD',       &
            ERR=2000,IOSTAT=IERR)
      REWIND (NDSI)
      READ (NDSI,'(A)',END=2001,ERR=2002) COMSTR
      IF (COMSTR.EQ.' ') COMSTR = '$'
!
      IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,901) COMSTR
!
! 1.b For WAVEWATCH III (See W3INIT)
!
      NDS( 1) = 20
      NDS( 2) =  6
!     NDS( 3) =  6
      NDS( 3) = 21
      NDS( 4) =  6
      NDS( 5) = 30
      NDS( 6) = 30
      NDS( 7) = 31
      NDS( 8) = 32
      NDS( 9) = 33
      NDS(10) = 35
      NDS(11) = 22
      NDS(12) = 23
      NDS(13) = 34
!
      NTRACE(1) =  NDS(3)
      NTRACE(2) =  10
!
!/NCO/!
!/NCO/! Redo according to NCO
!/NCO/!
!/NCO      NDS( 1) = 51
!/NCO      NDS( 2) = NDSO
!/NCO      NDS( 3) = NDSO
!/NCO      NDS( 4) = NDSO
!/NCO      NDS( 5) = 20
!/NCO      NDS( 6) = 21
!/NCO      NDS( 7) = 52
!/NCO      NDS( 8) = 53
!/NCO      NDS( 9) = 22
!/NCO      NDS(10) = 71
!/NCO      NDS(11) = 23
!/NCO      NDS(12) = 54
!/NCO      NDS(13) = 55
!/NCO      NTRACE(1) = NDSO
!
!/T      WRITE (NDST,9000) (NDS(I),I=1,12)
!/T      WRITE (NDST,9001) (NTRACE(I),I=1,2)
!
! 1.c Local parameters
!
! inferred from context: these flags (FL) are to indicate that the last (LST) 
!   field has been read from a file.
      FLLSTL = .FALSE. ! This is associated with J.EQ.1 (wlev)
      FLLSTI = .FALSE. ! This is associated with J.EQ.4 (ice)
      FLLST_ALL = .FALSE. ! For all
!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! 2.  Define input fields
!
      IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,920)
!

! If using experimental mud or ice physics, additional lines will
!  be read in from ww3_shel.inp and applied, so JFIRST is changed from
!  its initialization setting "JFIRST=1" to some lower value.
!/IC1      JFIRST=-7
!/IC2      JFIRST=-7
!/IS2      JFIRST=-7
!/IC3      JFIRST=-7
!/BT8      JFIRST=-7
!/BT9      JFIRST=-7
!/IC4      JFIRST=-7

      DO J=JFIRST, 7
        CALL NEXTLN ( COMSTR , NDSI , NDSEN )
        IF ( J .LT. 4 ) THEN
            READ (NDSI,*,END=2001,ERR=2002) FLAGTFC, FLH(J)
            IF (FLAGTFC.EQ.'T') THEN 
              INFLAGS1(J)=.TRUE.
              FLAGSC(J)=.FALSE.
            END IF
            IF (FLAGTFC.EQ.'F') THEN 
              INFLAGS1(J)=.FALSE.
              FLAGSC(J)=.FALSE.
            END IF
            IF (FLAGTFC.EQ.'C') THEN 
              INFLAGS1(J)=.TRUE.
              FLAGSC(J)=.TRUE.
            END IF
            FLH(J) = FLH(J) .AND. INFLAGS1(J)
          ELSE
            READ (NDSI,*,END=2001,ERR=2002) INFLAGS1(J)
            FLH(J) = .FALSE.
          END IF
        IF ( INFLAGS1(J) ) THEN
            YESXNO = 'YES/--'
          ELSE
            YESXNO = '---/NO'
          END IF
        IF ( FLH(J) ) THEN
            STRNG  = '(homogeneous field) '
          ELSE IF ( FLAGSC(J) ) THEN
            STRNG  = '(coupling field) '
          ELSE
            STRNG  = '                    '
          END IF
        IF ( IAPROC .EQ. NAPOUT )                                     &
              WRITE (NDSO,921) IDFLDS(J), YESXNO, STRNG
        END DO
!
      INFLAGS1(8) = .FALSE.
      FLH(8)   = .FALSE.
!/MGW      INFLAGS1(8) = .TRUE.
!/MGP      INFLAGS1(8) = .TRUE.
      IF ( INFLAGS1(8) .AND. IAPROC.EQ.NAPOUT )                          &
           WRITE (NDSO,921) IDFLDS(8), 'YES/--', ' '
!
      FLFLG  = INFLAGS1(-7) .OR. INFLAGS1(-6) .OR. INFLAGS1(-5) .OR. INFLAGS1(-4) &
               .OR. INFLAGS1(-3) .OR. INFLAGS1(-2) .OR. INFLAGS1(-1)           &
               .OR. INFLAGS1(0)  .OR. INFLAGS1(1)  .OR. INFLAGS1(2)            &
               .OR. INFLAGS1(3)  .OR. INFLAGS1(4)  .OR. INFLAGS1(5)            &
               .OR. INFLAGS1(6)  .OR. INFLAGS1(7)
      FLHOM  = FLH(-7) .OR. FLH(-6) .OR. FLH(-5) .OR. INFLAGS1(-4)       &
               .OR. FLH(-3) .OR. FLH(-2) .OR. FLH(-1) .OR. INFLAGS1(0)   &
               .OR. FLH(1) .OR. FLH(2) .OR. FLH(3) .OR. INFLAGS1(8)
!
      IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,922)
!
!     INFLAGS2 is just "initial value of INFLAGS1", i.e. does *not* get
!        changed when model reads last record of ice.ww3
      INFLAGS2=INFLAGS1

!/T      WRITE (NDST,9020) FLFLG, INFLAGS1, FLHOM, FLH
!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! 3.  Set time frame
!
      IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,930)
!
      CALL NEXTLN ( COMSTR , NDSI , NDSEN )
      READ (NDSI,*,END=2001,ERR=2002) TIME0
      CALL STME21 ( TIME0 , DTME21 )
      IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,931) DTME21
      TIME = TIME0
!/OASIS      TIME00 = TIME0
!
      CALL NEXTLN ( COMSTR , NDSI , NDSEN )
      READ (NDSI,*,END=2001,ERR=2002) TIMEN
!/OASIS      TIMEEND = TIMEN
      CALL STME21 ( TIMEN , DTME21 )
      IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,932) DTME21
!
      DTTST  = DSEC21 ( TIME0 , TIMEN )
      IF ( DTTST .LE. 0. ) GOTO 2003
!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! 4.  Define output
!
      CALL W3IOGR ( 'GRID', NDSF(5) )
      IF ( FLAGLL ) THEN
          FACTOR = 1.
        ELSE
          FACTOR = 1.E-3
        END IF
!
      CALL NEXTLN ( COMSTR , NDSI , NDSEN )
      READ (NDSI,*,END=2001,ERR=2002) IOSTYP
      IOSTYP = MAX ( 0 , MIN ( 3 , IOSTYP ) )
!
      IF ( IAPROC .EQ. NAPOUT ) THEN
          IF ( IOSTYP .EQ. 0 ) THEN
              WRITE (NDSO,940) 'No dedicated output process, ' //   &
                               'parallel file system required.'
          ELSE IF ( IOSTYP .EQ. 1 ) THEN
              WRITE (NDSO,940) 'No dedicated output process, ' //   &
                               'any file system.'
          ELSE IF ( IOSTYP .EQ. 2 ) THEN
              WRITE (NDSO,940) 'Single dedicated output process.'
          ELSE IF ( IOSTYP .EQ. 3 ) THEN
              WRITE (NDSO,940) 'Multiple dedicated output processes.'
          ELSE
              WRITE (NDSO,940) 'IOSTYP NOT RECOGNIZED'
          END IF
        END IF
!
! 4.a Loop over types
!
      NPTS   = 0
!
      NOTYPE = 6
!/COU      NOTYPE = 7
      DO J = 1, NOTYPE
!
! 4.b Process standard line
!
        CALL NEXTLN ( COMSTR , NDSI , NDSEN )
        READ (NDSI,*,END=2001,ERR=2002) (ODAT(I),I=5*(J-1)+1,5*J)
        ODAT(5*(J-1)+3) = MAX ( 0 , ODAT(5*(J-1)+3) )
!
        IF ( ODAT(5*(J-1)+3) .NE. 0 ) THEN
            IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,941) J, IDOTYP(J)
            TTIME(1) = ODAT(5*(J-1)+1)
            TTIME(2) = ODAT(5*(J-1)+2)
            CALL STME21 ( TTIME , DTME21 )
            IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,942) DTME21
            TTIME(1) = ODAT(5*(J-1)+4)
            TTIME(2) = ODAT(5*(J-1)+5)
            CALL STME21 ( TTIME , DTME21 )
            IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,943) DTME21
            TTIME(1) = 0
            TTIME(2) = 0
            DTTST    = REAL ( ODAT(5*(J-1)+3) )
            CALL TICK21 ( TTIME , DTTST  )
            CALL STME21 ( TTIME , DTME21 )
            IF ( ( ODAT(5*(J-1)+1) .NE. ODAT(5*(J-1)+4) .OR.          &
                   ODAT(5*(J-1)+2) .NE. ODAT(5*(J-1)+5) ) .AND.       &
                   IAPROC .EQ. NAPOUT ) THEN
                IF ( DTME21(9:9) .NE. '0' ) THEN
                    WRITE (NDSO,1944) DTME21( 9:19)
                  ELSE IF ( DTME21(10:10) .NE. '0' ) THEN
                    WRITE (NDSO,2944) DTME21(10:19)
                  ELSE
                    WRITE (NDSO,3944) DTME21(12:19)
                  END IF
              END IF
!
            IF ( J .EQ. 1 ) THEN
!
! 4.c Type 1: fields of mean wave parameters
!
              CALL W3READFLGRD ( NDSI, NDSO, 9, NDSEN, COMSTR, FLGD,   &
                                 FLGRD, IAPROC, NAPOUT, IERR )
              IF ( IERR .NE. 0 ) GOTO 2222
!
              ELSE IF ( J .EQ. 2 ) THEN
!
! 4.d Type 2: point output
!
                DO ILOOP=1, 2
                  JJ     = LEN_TRIM(FNMPRE)
                  IF ( ILOOP .EQ. 1 ) THEN
                      NDSI2  = NDSI
                      IF ( IAPROC .EQ. 1 ) OPEN                       &
                          (NDSS,FILE=FNMPRE(:JJ)//'ww3_shel.scratch')
                    ELSE
                      NDSI2  = NDSS
!/MPI                      CALL MPI_BARRIER (MPI_COMM,IERR_MPI)
                      OPEN (NDSS,FILE=FNMPRE(:JJ)//'ww3_shel.scratch')
                      REWIND (NDSS)
!
                      IF (NPTS.GT.0) THEN
                         ALLOCATE ( X(NPTS), Y(NPTS), PNAMES(NPTS) )
                      ELSE
                         GOTO 2004 
                      END IF
                    END IF
!
                  NPTS   = 0
                  DO
                    CALL NEXTLN ( COMSTR , NDSI , NDSEN )
                    READ (NDSI2,*,END=2001,ERR=2002) XX, YY, PN
                    IF ( ILOOP.EQ.1 .AND. IAPROC.EQ.1 ) THEN
                        BACKSPACE (NDSI)
                        READ (NDSI,'(A)') LINE
                        WRITE (NDSS,'(A)') LINE
                      END IF
                    IF ( PN .EQ. 'STOPSTRING' ) EXIT
                    NPTS   = NPTS + 1
                    IF ( ILOOP .EQ. 1 ) CYCLE
                    X(NPTS)      = XX
                    Y(NPTS)      = YY
                    PNAMES(NPTS) = PN
                    IF ( IAPROC .EQ. NAPOUT ) THEN
                        IF ( FLAGLL ) THEN
                            IF ( NPTS .EQ. 1 ) THEN
                                WRITE (NDSO,2945)                     &
                                              FACTOR*XX, FACTOR*YY, PN
                              ELSE
                                WRITE (NDSO,2946) NPTS,               &
                                              FACTOR*XX, FACTOR*YY, PN
                              END IF
                          ELSE
                            IF ( NPTS .EQ. 1 ) THEN
                                WRITE (NDSO,2955)                     &
                                              FACTOR*XX, FACTOR*YY, PN
                              ELSE
                                WRITE (NDSO,2956) NPTS,               &
                                              FACTOR*XX, FACTOR*YY, PN
                              END IF
                          END IF
                      END IF
                    END DO
!
                  IF ( IAPROC.EQ.1 .AND. ILOOP.EQ.1 ) CLOSE (NDSS)
                  END DO
!
                IF ( NPTS.EQ.0 .AND. IAPROC.EQ.NAPOUT )               &
                     WRITE (NDSO,2947)
                IF ( IAPROC .EQ. 1 ) THEN
!/MPI                    CALL MPI_BARRIER ( MPI_COMM, IERR_MPI )
                    CLOSE (NDSS,STATUS='DELETE')
                  ELSE
                    CLOSE (NDSS)
!/MPI                    CALL MPI_BARRIER ( MPI_COMM, IERR_MPI )
                  END IF
!
              ELSE IF ( J .EQ. 3 ) THEN
!
! 4.e Type 3: track output
!
                CALL NEXTLN ( COMSTR , NDSI , NDSEN )
                READ (NDSI,*,END=2001,ERR=2002) TFLAGI
!
                IF ( .NOT. TFLAGI ) NDS(11) = -NDS(11)
                IF ( IAPROC .EQ. NAPOUT ) THEN
                    IF ( .NOT. TFLAGI ) THEN
                        WRITE (NDSO,3945) 'input', 'UNFORMATTED'
                      ELSE
                        WRITE (NDSO,3945) 'input', 'FORMATTED'
                      END IF
                  END IF
!
              ELSE IF ( J .EQ. 4 ) THEN
!
! 4.f Type 4: restart files (no additional data)
!
              ELSE IF ( J .EQ. 5 ) THEN
!
! 4.g Type 5: nesting data (no additional data)
!
              ELSE IF ( J .EQ. 6 ) THEN
!
! 4.h Type 6: partitioning
!
!             IPRT: IX0, IXN, IXS, IY0, IYN, IYS
!
                CALL NEXTLN ( COMSTR , NDSI , NDSEN )
                READ (NDSI,*,END=2001,ERR=2002) IPRT, PRTFRM
!
                IF ( IAPROC .EQ. NAPOUT ) THEN
                    IF ( PRTFRM ) THEN
                        YESXNO = 'YES/--'
                      ELSE
                        YESXNO = '---/NO'
                      END IF
                    WRITE (NDSO,6945) IPRT, YESXNO
                  END IF
!
!/COU              ELSE IF ( J .EQ. 7 ) THEN
!/COU !
!/COU ! 4.i Type 7: coupling
!/COU !
!/COU               CALL W3READFLGRD ( NDSI, NDSO, 9, NDSEN, COMSTR, FLG2,     &
!/COU                                  FLGR2, IAPROC, NAPOUT, IERR )
!/COU               IF ( IERR .NE. 0 ) GOTO 2222
!/COU               CALL NEXTLN ( COMSTR , NDSI , NDSEN )
!/COU               READ (NDSI,'(A)',END=2001,ERR=2003,IOSTAT=IERR) FLDIN
!
              END IF
!
          END IF
!
        END DO
!
      IF ( NPTS.EQ.0 ) ALLOCATE ( X(1), Y(1), PNAMES(1) )
!
!/T      WRITE (NDST,9040) ODAT
!/T      WRITE (NDST,9041) FLGRD
!/T      WRITE (NDST,9042) IPRT, PRTFRM
!
! ... End loop over output types
!
! For outputs with non-zero time step, check dates :
! If output ends before run start OR output starts after run end,
! deactivate output cleanly with output time step = 0
! This is usefull for IOSTYP=3 (Multiple dedicated output processes)
! to avoid the definition of dedicated proc. for unused output.
!
      DO J = 1, NOTYPE
        DTTST  = DSEC21 ( TIME0 , ODAT(5*(J-1)+4:5*(J-1)+5) )
        IF ( DTTST .LT. 0 ) THEN
          ODAT(5*(J-1)+3) = 0
          IF ( IAPROC .EQ. NAPOUT )  WRITE (NDSO,8945) trim(IDOTYP(J))
          CONTINUE
        ENDIF
        DTTST  = DSEC21 ( ODAT(5*(J-1)+1:5*(J-1)+2), TIMEN )
        IF ( DTTST .LT. 0 ) THEN
          ODAT(5*(J-1)+3) = 0
          IF ( IAPROC .EQ. NAPOUT )  WRITE (NDSO,8945) trim(IDOTYP(J))
          CONTINUE
        ENDIF
      ENDDO
!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! 5.  Initializations
!
      IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,950)

!
! 5.a Opening field and data files
!
      IF ( FLFLG ) THEN
          IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,951)                  &
                                          'Preparing input files ...'
!

          DO J=JFIRST, 4
            IF ( INFLAGS1(J) .AND. .NOT. FLAGSC(J)) THEN
                IF ( FLH(J) ) THEN
                    IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,954) IDFLDS(J)
                  ELSE
                    JJ     = LEN_TRIM(FNMPRE)
                    FLAGTIDE = 0
                    CALL W3FLDO ('READ', IDSTR(J), NDSF(J), NDST,     &
                                  NDSEN, NX, NY, GTYPE,               &
                                  IERR, FPRE=FNMPRE(:JJ), TIDEFLAGIN=FLAGTIDE )
                    IF ( IERR .NE. 0 ) GOTO 2222
!/TIDE                    IF (FLAGTIDE.GT.0.AND.J.EQ.1) FLAGSTIDE(1)=.TRUE.
!/TIDE                    IF (FLAGTIDE.GT.0.AND.J.EQ.2) FLAGSTIDE(2)=.TRUE.
                    IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,955) IDFLDS(J)
                  END IF
              ELSE
                IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,954) IDFLDS(J)
              END IF
          END DO
!
          DO J=5, 7
            IF ( INFLAGS1(J) .AND. .NOT. FLAGSC(J)) THEN
                CALL W3FLDO ('READ', IDSTR(J), NDSF(J), NDST, NDSEN, &
                             RCLD(J), NY, NODATA(J),                 &
                             IERR, FPRE=FNMPRE(:JJ) )
                IF ( IERR .NE. 0 ) GOTO 2222
                IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,956) IDFLDS(J),&
                             RCLD(J), NODATA(J)
              ELSE
                IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,954) IDFLDS(J)
              END IF
          END DO
!
        END IF

!
! 5.b Wave model
!
      IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,951) 'Wave model ...'
!
!/TIDE      IF (FLAGSTIDE(1).OR.FLAGSTIDE(2)) THEN 
!/TIDE        CALL VUF_SET_PARAMETERS
!/TIDE        IF (FLAGSTIDE(1)) CALL W3FLDTIDE1 ( 'READ',  NDSF(1), NDST, NDSEN, NX, NY, IDSTR(1), IERR )
!/TIDE        IF (FLAGSTIDE(2)) CALL W3FLDTIDE1 ( 'READ',  NDSF(2), NDST, NDSEN, NX, NY, IDSTR(2), IERR )
!/TIDE        END IF
! 
     CALL W3INIT ( 1, 'ww3', NDS, NTRACE, ODAT, FLGRD, FLGR2, FLGD,    &
                   FLG2, NPTS, X, Y, PNAMES, IPRT, PRTFRM, MPI_COMM,   &
                   FLAGSTIDEIN=FLAGSTIDE )
!
!/TIDE      IF (FLAGSTIDE(1)) CALL W3FLDTIDE2 ( 'READ',  NDSF(1), NDST, NDSEN, NX, NY, IDSTR(1), 1, IERR )
!/TIDE      IF (FLAGSTIDE(2)) CALL W3FLDTIDE2 ( 'READ',  NDSF(2), NDST, NDSEN, NX, NY, IDSTR(2), 1, IERR )
!/TIDE      ALLOCATE(V_ARG(170,1),F_ARG(170,1),U_ARG(170,1))  ! to be removed later ...
!
      ALLOCATE ( XXX(NX,NY) )
      ALLOCATE ( XY(NX+1,NY) )

!
! 5.c Homogeneous field data
!
      IF ( FLHOM ) THEN
          IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,951)                  &
                        'Homogeneous field data (and moving grid) ...'
          NH     = 0
!
! ... Start of loop.
!
          DO
            CALL NEXTLN ( COMSTR , NDSI , NDSEN )
            READ (NDSI,*,END=2001,ERR=2002) IDTST

            IF ( IDTST.NE.IDSTR(-7) .AND. IDTST.NE.IDSTR(-6) .AND.   &
                 IDTST.NE.IDSTR(-5) .AND. IDTST.NE.IDSTR(-4) .AND.   &
                 IDTST.NE.IDSTR(-3) .AND. IDTST.NE.IDSTR(-2) .AND.   &
                 IDTST.NE.IDSTR(-1) .AND. IDTST.NE.IDSTR(0)  .AND.   &
                 IDTST.NE.IDSTR(1)  .AND. IDTST.NE.IDSTR(2)  .AND.   &
                 IDTST.NE.IDSTR(3)  .AND. IDTST.NE.IDSTR(8)  .AND.   &
                 IDTST.NE.'STP' ) GOTO 2005

!
! ... Stop conditions
!
            IF ( IDTST .EQ. 'STP' ) THEN
                EXIT
              ELSE
                BACKSPACE ( NDSI )
              END IF
!
! ... Store data
!
            DO J=LBOUND(IDSTR,1), 4
              I      = J
              IF ( J .EQ. 4 ) I = 8
              IF ( IDTST .EQ. IDSTR(I) ) THEN
                  NH(J)    = NH(J) + 1
                  IF ( NH(J) .GT. NHMAX ) GOTO 2006
                  IF ( J .LE. 1  ) THEN ! water levels, etc. : get HS
                     READ (NDSI,*,END=2001,ERR=2002) IDTST,           &
                           THO(1,J,NH(J)), THO(2,J,NH(J)),            &
                           HS(NH(J),J)
                    ELSE IF ( J .EQ. 2 ) THEN ! currents: get HA and HD
                     READ (NDSI,*,END=2001,ERR=2002) IDTST,           &
                           THO(1,J,NH(J)), THO(2,J,NH(J)),            &
                           HA(NH(J),J), HD(NH(J),J)
                    ELSE IF ( J .EQ. 3 ) THEN ! wind: get HA HD and HS
                     READ (NDSI,*,END=2001,ERR=2002) IDTST,           &
                           THO(1,J,NH(J)), THO(2,J,NH(J)),            &
                           HA(NH(J),J), HD(NH(J),J), HS(NH(J),J)
                    ELSE IF ( J .EQ. 4 ) THEN ! ice: HA and HD
                     READ (NDSI,*,END=2001,ERR=2002) IDTST,           &
                           THO(1,J,NH(J)), THO(2,J,NH(J)),            &
                           HA(NH(J),J), HD(NH(J),J)
                    END IF
                END IF
              END DO
!
            END DO
!
! ... End of loop, output
!
!/O7          DO J=JFIRST, 3
!/O7            IF ( FLH(J) .AND. IAPROC.EQ.NAPOUT ) THEN
!/O7                WRITE (NDSO,952) NH(J), IDFLDS(J)
!/O7                DO I=1, NH(J)
!/O7                  IF ( J .LE. 1 ) THEN
!/O7                      WRITE (NDSO,953) I, THO(1,J,I), THO(2,J,I), &
!/O7                                          HS(I,J)
!/O7                    ELSE IF ( J .EQ. 2 ) THEN
!/O7                      WRITE (NDSO,953) I, THO(1,J,I), THO(2,J,I), &
!/O7                                          HA(I,J), HD(I,J)
!/O7                    ELSE IF ( J .EQ. 3 ) THEN
!/O7                      WRITE (NDSO,953) I, THO(1,J,I), THO(2,J,I), &
!/O7                                          HA(I,J), HD(I,J), HS(I,J)
!/O7                    END IF
!/O7                  END DO
!/O7              END IF
!/O7            END DO
!
!/O7          IF ( INFLAGS1(8) .AND. IAPROC.EQ.NAPOUT ) THEN
!/O7              WRITE (NDSO,952) NH(4), IDFLDS(8)
!/O7              DO I=1, NH(J)
!/O7                WRITE (NDSO,953) I, THO(1,4,I), THO(2,4,I),       &
!/O7                                    HA(I,4), HD(I,4)
!/O7                END DO
!/O7              END IF
!
          IF ( ( FLH(-7) .AND. (NH(-7).EQ.0) ) .OR.                     &
               ( FLH(-6) .AND. (NH(-6).EQ.0) ) .OR.                     &
               ( FLH(-5) .AND. (NH(-5).EQ.0) ) .OR.                     &
               ( FLH(-4) .AND. (NH(-4).EQ.0) ) .OR.                     &
               ( FLH(-3) .AND. (NH(-3).EQ.0) ) .OR.                     &
               ( FLH(-2) .AND. (NH(-2).EQ.0) ) .OR.                     &
               ( FLH(-1) .AND. (NH(-1).EQ.0) ) .OR.                     &
               ( FLH(0)  .AND. (NH(0).EQ.0)  ) .OR.                     &
               ( FLH(1)  .AND. (NH(1).EQ.0)  ) .OR.                     &
               ( FLH(2)  .AND. (NH(2).EQ.0)  ) .OR.                     &
               ( FLH(3)  .AND. (NH(3).EQ.0)  ) .OR.                     &
               ( INFLAGS1(8) .AND. (NH(4).EQ.0) ) ) GOTO 2007
!
        END IF
!
!/MPI      CALL MPI_BARRIER ( MPI_COMM, IERR_MPI )
!
      IF ( IAPROC .EQ. NAPOUT ) THEN
!/F90          CALL DATE_AND_TIME ( VALUES=CLKDT2 )
        END IF
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!
!/OASIS ! Initialize L_MASTER, COUPL_COMM
!/OASIS      IF ( IAPROC .EQ. 1) THEN
!/OASIS         L_MASTER = .TRUE.
!/OASIS      ELSE
!/OASIS         L_MASTER = .FALSE.
!/OASIS      ENDIF 
!/OASIS      CALL CPL_OASIS_GRID(L_MASTER,MPI_COMM)
!/OASIS ! Estimate the weights for the spatial interpolation
!/OASIS      CALL CPL_OASIS_DEFINE(NDSO, FLDIN, FLDOUT)

!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! 6.  Model without input
!
      IF ( .NOT. FLFLG ) THEN
!
          IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,960)
          CALL W3WAVE ( 1, TIMEN                      &
!/OASIS                 ,.TRUE., .FALSE., MPI_COMM    &
                      )
!
          GOTO 2222
!
        END IF
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! 7.  Model with input
!
      IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,970)
!
!/NCC      CFLAG = .FALSE. 
!/NCC      CALL WW_INIT(1,GRIDS(1)%NX,GRIDS(1)%NY,            &
!/NCC      GRIDS(1)%X0,GRIDS(1)%Y0,GRIDS(1)%SX,GRIDS(1)%SY)
!/NCC      CALL WW_RECVDTC
!/NCC      CALL WW_SENDGRIDS
!/NCC      CALL WW_SENDSLM(GRIDS(1)%MAPSTA)
!/NCC      IF ( IAPROC .EQ. NAPOUT .AND. DEBUG_NCC ) THEN
!/NCC         OPEN(9751,FILE='debug_writeout_wind',           &
!/NCC              FORM='UNFORMATTED',STATUS='UNKNOWN')
!/NCC         OPEN(9752,FILE='debug_writeout_ice',            &
!/NCC              FORM='UNFORMATTED',STATUS='UNKNOWN')
!/NCC         OPEN(9753,FILE='data_forDC',                    &
!/NCC              FORM='UNFORMATTED',STATUS='UNKNOWN')
!/NCC         WRITE(9753) GRIDS(1)%NX,GRIDS(1)%NY,            &
!/NCC           GRIDS(1)%X0,GRIDS(1)%Y0,GRIDS(1)%SX,GRIDS(1)%SY
!/NCC         WRITE(9753) GRIDS(1)%MAPSTA
!/NCC      END IF
  700 CONTINUE
!
!/NCC      IF ( IAPROC .EQ. NAPOUT .AND. DEBUG_NCC ) WRITE(9753) TIME0
!/NCC      CALL WW_TSTEP_INIT(TIME0)
!/NCC      CALL WW_RECV_SBC
!/NCC      CALL WW_RECV_PSEUDOICE
!
! 7.a Determine next time interval and input fields
! 7.a.1 Preparation
!
      TTIME  = TIMEN
!
      CALL STME21 ( TIME0 , DTME21 )
      IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,971) DTME21
!
!/T      WRITE (NDST,9070) '0-N', TIME0, TTIME,           &
!/T                        IDSTR(-7), INFLAGS1(-7), TI1,     &
!/T                        IDSTR(-6), INFLAGS1(-6), TI2,     &
!/T                        IDSTR(-5), INFLAGS1(-5), TI3,     &
!/T                        IDSTR(-4), INFLAGS1(-4), TI4,     &
!/T                        IDSTR(-3), INFLAGS1(-3), TI5,     &
!/T                        IDSTR(-2), INFLAGS1(-2), TZN,     &
!/T                        IDSTR(-1), INFLAGS1(-1), TTN,     &
!/T                        IDSTR(0), INFLAGS1(0), TVN,       &
!/T                        IDSTR(1), INFLAGS1(1), TLN,       &
!/T                        IDSTR(2), INFLAGS1(2), TC0, TCN,  &
!/T                        IDSTR(3), INFLAGS1(3), TW0, TWN,  &
!/T                        IDSTR(4), INFLAGS1(4), TIN,       &
!/T                        IDSTR(5), INFLAGS1(5), T0N,       &
!/T                        IDSTR(6), INFLAGS1(6), T1N,       &
!/T                        IDSTR(7), INFLAGS1(7), T2N,       &
!/T                        IDSTR(8), INFLAGS1(8), TG0, TGN
!

      DO J=JFIRST,8
!
        IF ( INFLAGS1(J) ) THEN
!
! 7.a.2 Check if update is needed
            IF (.NOT.FLAGSC(J)) THEN 
              TTT(1) = TFN(1,J)
              TTT(2) = TFN(2,J)
              IF ( TTT(1) .EQ. -1 ) THEN
                DTTST  = 0.
              ELSE
                DTTST  = DSEC21 ( TIME0 , TTT )
              END IF
            ELSE 
!/OASIS             ID_OASIS_TIME = DSEC21 ( TIME00 , TIME )
!/OASIS             IF ( (MOD(ID_OASIS_TIME/DTOUT(7),1.0) .LT. 1.E-7 ) .AND. &
!/OASIS                  (DSEC21 (TIME, TIMEEND) .GT. 0.0)) DTTST=0.
             END IF
!
!/T            WRITE (NDST,9071) IDSTR(J), DTTST
!
! 7.a.3 Update time and fields / data
!
            IF ( DTTST .LE. 0. ) THEN
!/TIDE                 IF ((FLLEVTIDE .AND.(J.EQ.1)).OR.(FLCURTIDE.AND.(J.EQ.2))) THEN 
!/TIDE                   IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,974) IDFLDS(J)
!/TIDE                 ELSE
                IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,972) IDFLDS(J)
!/TIDE                 END IF
!
! IC1 : (in context of IC3, this is ice thickness)
                IF ( J .EQ. -7 ) THEN
                   IF ( FLH(J) ) THEN
                      CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
                           TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
                           TTT, XXX, XXX, XXX, TI1, XXX, XXX, ICEP1, IERR)
                   ELSE
                      CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
                           NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
                           TTT, XXX, XXX, XXX, TI1, XXX, XXX, ICEP1, IERR)
                   END IF
                   IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
! IC2 : (in context of IC3, this is ice viscosity)
                ELSE IF ( J .EQ. -6 ) THEN
                   IF ( FLH(J) ) THEN
                      CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
                           TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
                           TTT, XXX, XXX, XXX, TI2, XXX, XXX, ICEP2, IERR)
                   ELSE
                      CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
                           NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
                           TTT, XXX, XXX, XXX, TI2, XXX, XXX, ICEP2, IERR)
                   END IF
                   IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
! IC3 : (in context of IC3, this is ice density)
                ELSE IF ( J .EQ. -5 ) THEN
                   IF ( FLH(J) ) THEN
                      CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
                           TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
                           TTT, XXX, XXX, XXX, TI3, XXX, XXX, ICEP3, IERR)
                   ELSE
                      CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
                           NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
                           TTT, XXX, XXX, XXX, TI3, XXX, XXX, ICEP3, IERR)
                   END IF
                   IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
! IC4 : (in context of IC3, this is ice modulus)
                ELSE IF ( J .EQ. -4 ) THEN
                   IF ( FLH(J) ) THEN
                      CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
                           TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
                           TTT, XXX, XXX, XXX, TI4, XXX, XXX, ICEP4, IERR)
                   ELSE
                      CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
                           NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
                           TTT, XXX, XXX, XXX, TI4, XXX, XXX, ICEP4, IERR)
                   END IF
                   IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
! IC5 : ice flow diam.
                ELSE IF ( J .EQ. -3 ) THEN
                   IF ( FLH(J) ) THEN
                      CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
                           TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
                           TTT, XXX, XXX, XXX, TI5, XXX, XXX, ICEP5, IERR)
                   ELSE
                      CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
                           NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
                           TTT, XXX, XXX, XXX, TI5, XXX, XXX, ICEP5, IERR)
                   END IF
                   IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
! MUD1 : mud density
                ELSE IF ( J .EQ. -2 ) THEN
                   IF ( FLH(J) ) THEN
                      CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
                           TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
                           TTT, XXX, XXX, XXX, TZN, XXX, XXX, MUDD, IERR)
                   ELSE
                      CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
                           NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
                           TTT, XXX, XXX, XXX, TZN, XXX, XXX, MUDD, IERR)
                   END IF
                   IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
! MUD2 : mud thickness
                ELSE IF ( J .EQ. -1 ) THEN
                   IF ( FLH(J) ) THEN
                      CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
                           TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
                           TTT, XXX, XXX, XXX, TTN, XXX, XXX, MUDT, IERR)
                   ELSE
                      CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
                           NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
                           TTT, XXX, XXX, XXX, TTN, XXX, XXX, MUDT, IERR)
                   END IF
                   IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
! MUD3 : mud viscosity
                ELSE IF ( J .EQ. 0 ) THEN
                   IF ( FLH(J) ) THEN
                      CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
                           TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
                           TTT, XXX, XXX, XXX, TVN, XXX, XXX, MUDV, IERR)
                   ELSE
                      CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
                           NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
                           TTT, XXX, XXX, XXX, TVN, XXX, XXX, MUDV, IERR)
                   END IF
                   IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
! LEV : water levels
                ELSE IF ( J .EQ. 1 ) THEN
                   IF ( FLH(J) ) THEN
                      CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
                           TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
                           TTT, XXX, XXX, XXX, TLN, XXX, XXX, WLEV, IERR)
                   ELSE
!/TIDE                        IF ( FLLEVTIDE ) THEN 
!/TIDE                          IERR=0
!/TIDE                          IF ( TLN(1) .EQ. -1 ) THEN 
!/TIDE                            TLN = TIME 
!/TIDE                          ELSE 
!/TIDE                            CALL TICK21 ( TLN, TIDE_DT )
!/TIDE                            END IF
!/TIDE                        ELSE
!/OASIS                 COUPL_COMM = MPI_COMM
!/OASOCM                IF (.NOT.FLAGSC(J)) ID_OASIS_TIME = -1
                      CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
                           NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
                           TTT, XXX, XXX, XXX, TLN, XXX, XXX, WLEV,   &
                           IERR                                       &
!/OASOCM                   , COUPL_COMM                               &
                           )
!/TIDE                          END IF
                   END IF
                   IF ( IERR .LT. 0 ) FLLSTL = .TRUE.
!could use this:   IF ( IERR .LT. 0 ) FLLST_ALL(J) = .TRUE.
! CUR : currents
                ELSE IF ( J .EQ. 2 ) THEN
                   IF ( FLH(J) ) THEN
                      CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
                           TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
                           TC0, CX0, CY0, XXX, TCN, CXN, CYN, XXX, IERR)
                   ELSE
!/TIDE                        IF ( FLCURTIDE ) THEN 
!/TIDE                          IERR=0
!/TIDE                          IF ( TCN(1) .EQ. -1 ) THEN 
!/TIDE                            TCN = TIME 
!/TIDE                            END IF
!/TIDE                          TC0(:) = TCN(:)               
!/TIDE                          CALL TICK21 ( TCN, TIDE_DT )
!/TIDE                        ELSE
!/OASIS                 COUPL_COMM = MPI_COMM
!/OASOCM                IF (.NOT.FLAGSC(J)) ID_OASIS_TIME = -1

                      CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
                           NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
                           TC0, CX0, CY0, XXX, TCN, CXN, CYN, XXX,    &
                           IERR                                       &
!/OASOCM                   , COUPL_COMM                               &
                           )
!/TIDE                          END IF
                   END IF
! WND : winds
                ELSE IF ( J .EQ. 3 ) THEN
                   IF ( FLH(J) ) THEN
                      CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
                           TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
                           TW0, WX0, WY0, DT0, TWN, WXN, WYN, DTN, IERR)
                   ELSE
!/OASIS                 COUPL_COMM = MPI_COMM
!/OASACM                IF (.NOT.FLAGSC(J)) ID_OASIS_TIME = -1
!/NCC                        IF (.NOT.CFLAG(J)) THEN
                      CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
                           NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
                           TW0, WX0, WY0, DT0, TWN, WXN, WYN, DTN,    &
                           IERR                                       &
!/OASACM                   , COUPL_COMM                               &
                           )
!/NCC                        END IF
!/NCC                        CALL WW_CDETECT(CFLAG(J))
!/NCC                        IF ( IAPROC .EQ. NAPOUT .AND. DEBUG_NCC )     &
!/NCC                             WRITE(9753) TW0, TWN
!/NCC                        CALL WW_UPDATE_WIND(TW0,TWN,WX0,WY0,WXN,WYN)
!/NCC                        IF ( IAPROC .EQ. NAPOUT .AND. DEBUG_NCC )     &
!/NCC                             WRITE(9751) TW0, TWN, WX0, WY0, WXN, WYN
                      END IF
! ICE : ice conc.
                ELSE IF ( J .EQ. 4 ) THEN
!/NCC                    IF (.NOT.CFLAG(J)) THEN
                   CALL W3FLDG ('READ', IDSTR(J), NDSF(J),            &
                        NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN,    &
                        TTT, XXX, XXX, XXX, TIN, XXX, BERGI, ICEI, IERR)
                   IF ( IERR .LT. 0 ) FLLSTI = .TRUE.
!could use this:   IF ( IERR .LT. 0 ) FLLST_ALL(J) = .TRUE.
!/NCC                    END IF
!/NCC                    CALL WW_CDETECT(CFLAG(J))
!/NCC                    IF ( IAPROC .EQ. NAPOUT .AND. DEBUG_NCC )    &
!/NCC                         WRITE(9753) TIN
!/NCC                    CALL WW_UPDATE_PSEUDOICE(TIN,ICEI)
!/NCC                    IF ( IAPROC .EQ. NAPOUT .AND. DEBUG_NCC )    &
!/NCC                         WRITE(9752) TIN, ICEI
! Assim data
                ELSE IF ( J .EQ. 5 ) THEN
                   CALL W3FLDD ('SIZE', IDSTR(J), NDSF(J), NDST,      &
                        NDSEN, TIME0, T0N, RCLD(J), NDT(J),           &
                        NDTNEW, DATA0, IERR )
                   IF ( IERR .LT. 0 ) THEN
                        INFLAGS1(J) = .FALSE.
                        IF ( ALLOCATED(DATA0) ) DEALLOCATE(DATA0)
                   ELSE
                        NDT(J) = NDTNEW
                        IF ( ALLOCATED(DATA0) ) DEALLOCATE(DATA0)
                        ALLOCATE ( DATA0(RCLD(J),NDT(J)) )
                        CALL W3FLDD ('READ', IDSTR(J), NDSF(J), NDST, &
                             NDSEN, TIME0, T0N, RCLD(J), NDT(J),      &
                             NDTNEW, DATA0, IERR )
                   END IF
! Assim data
                ELSE IF ( J .EQ. 6 ) THEN
                   CALL W3FLDD ('SIZE', IDSTR(J), NDSF(J), NDST,      &
                        NDSEN, TIME0, T1N, RCLD(J), NDT(J),           &
                        NDTNEW, DATA1, IERR )
                   IF ( IERR .LT. 0 ) THEN
                        INFLAGS1(J) = .FALSE.
                        IF ( ALLOCATED(DATA1) ) DEALLOCATE(DATA1)
                   ELSE
                        NDT(J) = NDTNEW
                        IF ( ALLOCATED(DATA1) ) DEALLOCATE(DATA1)
                        ALLOCATE ( DATA1(RCLD(J),NDT(J)) )
                        CALL W3FLDD ('READ', IDSTR(J), NDSF(J), NDST, &
                             NDSEN, TIME0, T1N, RCLD(J), NDT(J),      &
                             NDTNEW, DATA1, IERR )
                   END IF
! Assim data
                ELSE IF ( J .EQ. 7 ) THEN
                   CALL W3FLDD ('SIZE', IDSTR(J), NDSF(J), NDST,      &
                        NDSEN, TIME0, T2N, RCLD(J), NDT(J),           &
                        NDTNEW, DATA2, IERR )
                   IF ( IERR .LT. 0 ) THEN
                        INFLAGS1(J) = .FALSE.
                        IF ( ALLOCATED(DATA2) ) DEALLOCATE(DATA2)
                   ELSE
                        NDT(J) = NDTNEW
                        IF ( ALLOCATED(DATA2) ) DEALLOCATE(DATA2)
                        ALLOCATE ( DATA2(RCLD(J),NDT(J)) )
                        CALL W3FLDD ('READ', IDSTR(J), NDSF(J), NDST, &
                             NDSEN, TIME0, T2N, RCLD(J), NDT(J),      &
                             NDTNEW, DATA2, IERR )
                   END IF
! Track
                ELSE IF ( J .EQ. 8 ) THEN
                   CALL W3FLDM (4, NDST, NDSEN, TIME0, TIMEN, NH(4),  &
                           NHMAX, THO, HA, HD, TG0, GA0, GD0,         &
                           TGN, GAN, GDN, IERR)
                END IF
!
                IF ( IERR.GT.0 ) GOTO 2222
                IF ( IERR.LT.0 .AND. IAPROC.EQ.NAPOUT )               &
                                 WRITE (NDSO,973) IDFLDS(J)
!
              END IF
!
! 7.a.4 Update next ending time
!
            IF ( INFLAGS1(J) ) THEN
                TTT    = TFN(:,J)
                DTTST  = DSEC21 ( TTT , TTIME )
                IF ( DTTST.GT.0. .AND. .NOT.                          &
                       ( (FLLSTL .AND. J.EQ.1) .OR.                   &
                         (FLLST_ALL(J) .AND. J.EQ.-7) .OR.            &
                         (FLLST_ALL(J) .AND. J.EQ.-6) .OR.            &
                         (FLLST_ALL(J) .AND. J.EQ.-5) .OR.            &
                         (FLLST_ALL(J) .AND. J.EQ.-4) .OR.            &
                         (FLLST_ALL(J) .AND. J.EQ.-3) .OR.            &
                         (FLLST_ALL(J) .AND. J.EQ.-2) .OR.            &
                         (FLLST_ALL(J) .AND. J.EQ.-1) .OR.            &
                         (FLLST_ALL(J) .AND. J.EQ.0 ) .OR.            &
                         (FLLSTI .AND. J.EQ.4) ) ) THEN
                    TTIME  = TTT
! notes: if model has run out beyond field input, then this line should not 
!    be reached. 
                  END IF
              END IF
!
          END IF
!
        END DO ! J=JFIRST,8
!
! update the next assimilation data time

      TDN = TTIME
      CALL TICK21 ( TDN, 1. )
      DO J=5, 7
        IF ( INFLAGS1(J) ) THEN
            TTT    = TFN(:,J)
            DTTST  = DSEC21 ( TTT , TDN )
            IF ( DTTST.GT.0. ) TDN = TTT
          END IF
        END DO
!
!/T      WRITE (NDST,9072) '0-N', TIME0, TTIME,           &
!/T                        IDSTR(-7), INFLAGS1(-7), TI1,     &
!/T                        IDSTR(-6), INFLAGS1(-6), TI2,     &
!/T                        IDSTR(-5), INFLAGS1(-5), TI3,     &
!/T                        IDSTR(-4), INFLAGS1(-4), TI4,     &
!/T                        IDSTR(-3), INFLAGS1(-3), TI5,     &
!/T                        IDSTR(-2), INFLAGS1(-2), TZN,     &
!/T                        IDSTR(-1), INFLAGS1(-1), TTN,     &
!/T                        IDSTR(0), INFLAGS1(0), TVN,       &
!/T                        IDSTR(1), INFLAGS1(1), TLN,       &
!/T                        IDSTR(2), INFLAGS1(2), TC0, TCN,  &
!/T                        IDSTR(3), INFLAGS1(3), TW0, TWN,  &
!/T                        IDSTR(4), INFLAGS1(4), TIN,       &
!/T                        IDSTR(5), INFLAGS1(5), T0N,       &
!/T                        IDSTR(6), INFLAGS1(6), T1N,       &
!/T                        IDSTR(7), INFLAGS1(7), T2N, TDN,  &
!/T                        IDSTR(8), INFLAGS1(8), TG0, TGN
!
      IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,*) ' '
!
! 7.b Run the wave model for the given interval
!
      TIME0  = TTIME
!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!     End of shell
!
      GOTO 2222
!
! Error escape locations
!
 2000 CONTINUE
      IF ( IAPROC .EQ. NAPERR ) WRITE (NDSE,1000) IERR
      GOTO 2222
!
 2001 CONTINUE
      IF ( IAPROC .EQ. NAPERR ) WRITE (NDSE,1001)
      GOTO 2222
!
 2002 CONTINUE
      IF ( IAPROC .EQ. NAPERR ) WRITE (NDSE,1002) IERR
      GOTO 2222
!
 2003 CONTINUE
      IF ( IAPROC .EQ. NAPERR ) WRITE (NDSE,1003)
      GOTO 2222
!
 2004 CONTINUE
      IF ( IAPROC .EQ. NAPERR ) WRITE (NDSE,1004)
      GOTO 2222
!
 2005 CONTINUE
      IF ( IAPROC .EQ. NAPERR ) WRITE (NDSE,1005) IDTST
      GOTO 2222
!
 2006 CONTINUE
      IF ( IAPROC .EQ. NAPERR ) WRITE (NDSE,1006) IDTST, NH(J)
      GOTO 2222
!
 2007 CONTINUE
      IF ( IAPROC .EQ. NAPERR ) WRITE (NDSE,1007)
      GOTO 2222
!
 2008 CONTINUE
      IF ( IAPROC .EQ. NAPERR ) WRITE (NDSE,1008) IERR
      GOTO 2222
!
 2222 CONTINUE
!
!/MPI      CALL MPI_BARRIER ( MPI_COMM, IERR_MPI )
!
      IF ( IAPROC .EQ. NAPOUT ) THEN
!/F90          CALL DATE_AND_TIME ( VALUES=CLKDT3 )
!/F90          CLKFIN = TDIFF ( CLKDT1,CLKDT2 )
!/F90          CLKFEL = TDIFF ( CLKDT1,CLKDT3 )
!/F90          WRITE (NDSO,997) CLKFIN
!/F90          WRITE (NDSO,998) CLKFEL
!/F90          IF ( NDSO .NE. NDS(1) ) THEN
!/F90              WRITE (NDS(1),997) CLKFIN
!/F90              WRITE (NDS(1),998) CLKFEL
!/F90            END IF
          WRITE (NDSO,999)
        END IF
!
!/NCO/!     IF ( IAPROC .EQ. 1 ) CALL W3TAGE('WAVEFCST')
!/OASIS IF (OASISED.EQ.1) THEN
!/OASIS        CALL CPL_OASIS_FINALIZE
!/OASIS ELSE
!/PALM  IF (PALMED.EQ.0) THEN 
!! !/MPI      CALL MPI_FINALIZE  ( IERR_MPI )
!/PALM  ENDIF
!/OASIS END IF
!
!
! Formats
!
  900 FORMAT (/15X,'      *** WAVEWATCH III Program shell ***      '/ &
               15X,'==============================================='/)
  901 FORMAT ( '  Comment character is ''',A,''''/)
!
  920 FORMAT (/'  Input fields : '/                                   &
               ' --------------------------------------------------')
  921 FORMAT ( '       ',A,2X,A,2X,A)
  922 FORMAT ( ' ' )
!
  930 FORMAT (/'  Time interval : '/                                  &
               ' --------------------------------------------------')
  931 FORMAT ( '       Starting time : ',A)
  932 FORMAT ( '       Ending time   : ',A/)
!
  940 FORMAT (/'  Output requests : '/                                &
               ' --------------------------------------------------'/ &
               '       ',A)
  941 FORMAT (/'       Type',I2,' : ',A/                              &
               '      -----------------------------------------')
  942 FORMAT ( '            From     : ',A)
  943 FORMAT ( '            To       : ',A)
 1944 FORMAT ( '            Interval : ', 8X,A11/)
 2944 FORMAT ( '            Interval : ', 9X,A10/)
 3944 FORMAT ( '            Interval : ',11X,A8/)
 1945 FORMAT ( '            Fields   : ',A)
 2945 FORMAT ( '            Point  1 : ',2F8.2,2X,A)
 2955 FORMAT ( '            Point  1 : ',2(F8.1,'E3'),2X,A)
 2946 FORMAT ( '              ',I6,' : ',2F8.2,2X,A)
 2956 FORMAT ( '              ',I6,' : ',2(F8.1,'E3'),2X,A)
 2947 FORMAT ( '            No points defined')
 3945 FORMAT ( '            The file with ',A,' data is ',A,'.')
 6945 FORMAT ( '            IX first,last,inc :',3I5/                 &
               '            IY first,last,inc :',3I5/                 &
               '            Formatted file    :    ',A)
 8945 FORMAT ( '            Dates out of run dates : output ', A,     &
               ' deactivated')
!
  950 FORMAT (/'  Initializations :'/                                 &
               ' --------------------------------------------------')
  951 FORMAT ( '       ',A)
!/O7  952 FORMAT ( '       ',I6,2X,A)
!/O7  953 FORMAT ( '          ',I6,I11.8,I7.6,3E12.4)
  954 FORMAT ( '            ',A,': file not needed')
  955 FORMAT ( '            ',A,': file OK')
  956 FORMAT ( '            ',A,': file OK, recl =',I3,               &
               '  undef = ',E10.3)
!
  960 FORMAT (/'  Running model without input fields'/                &
               ' --------------------------------------------------'/)
!
  970 FORMAT (/'  Running model with input fields'/                   &
               ' --------------------------------------------------')
  971 FORMAT (/'  Updating input at ',A)
  972 FORMAT ( '     Updating ',A)
  973 FORMAT ( '        Past last ',A)
!/TIDE  974 FORMAT ( '     Updating ',A,'using tidal constituents')
  975 FORMAT (/'  Data assimmilation at ',A)
!
!/F90  997 FORMAT (/'  Initialization time :',F10.2,' s')
!/F90  998 FORMAT ( '  Elapsed time        :',F10.2,' s')
!
  999 FORMAT(//'  End of program '/                                   &
               ' ===================================='/               &
               '         WAVEWATCH III Program shell '/)
!
 1000 FORMAT (/' *** WAVEWATCH III ERROR IN W3SHEL : '/               &
               '     ERROR IN OPENING INPUT FILE'/                    &
               '     IOSTAT =',I5/)
!
 1001 FORMAT (/' *** WAVEWATCH III ERROR IN W3SHEL : '/               &
               '     PREMATURE END OF INPUT FILE'/)
!
 1002 FORMAT (/' *** WAVEWATCH III ERROR IN W3SHEL : '/               &
               '     ERROR IN READING FROM INPUT FILE'/               &
               '     IOSTAT =',I5/)
!
 1003 FORMAT (/' *** WAVEWATCH III ERROR IN W3SHEL : '/               &
               '     ILLEGAL TIME INTERVAL'/)
!
 1004 FORMAT (/' *** WAVEWATCH III ERROR IN W3SHEL : '/               &
               '     POINT OUTPUT ACTIVATED, BUT NO POINTS DEFINED'/)
!
 1005 FORMAT (/' *** WAVEWATCH III ERROR IN W3SHEL : '/               &
               '     ILLEGAL ID STRING HOMOGENEOUS FIELD : ',A/)
!
 1006 FORMAT (/' *** WAVEWATCH III ERROR IN W3SHEL : '/               &
               '     TOO MANY HOMOGENEOUS FIELDS : ',A,1X,I4/)
!
 1007 FORMAT (/' *** WAVEWATCH III ERROR IN W3SHEL : '/               &
               '     INSUFFICIENT DATA FOR HOMOGENEOUS FIELDS'/)
!
 1008 FORMAT (/' *** WAVEWATCH III ERROR IN W3SHEL : '/               &
               '     ERROR IN OPENING OUTPUT FILE'/                   &
               '     IOSTAT =',I5/)
!
      END SUBROUTINE W3_INIT

      SUBROUTINE W3_RUN(myComm, myTime)

      USE W3GDATMD
      USE W3WDATMD, ONLY: TIME, W3NDAT, W3DIMW, W3SETW
!/OASIS      USE W3WDATMD, ONLY: TIME00, TIMEEND
      USE W3ADATMD, ONLY: W3NAUX, W3DIMA, W3SETA
      USE W3IDATMD
!/OASIS      USE W3ODATMD, ONLY: DTOUT
      USE W3ODATMD, ONLY: W3NOUT, W3SETO
      USE W3ODATMD, ONLY: NAPROC, IAPROC, NAPOUT, NAPERR, NOGRP,      &
                          NGRPP, IDOUT, FNMPRE, IOSTYP, NOTYPE, NOGE
!/
      USE W3FLDSMD
      USE W3INITMD
      USE W3WAVEMD
      USE W3WDASMD
!/
      USE W3IOGRMD, ONLY: W3IOGR
      USE W3IOGOMD, ONLY: W3READFLGRD, FLDOUT
      USE W3IOPOMD
      USE W3SERVMD, ONLY : NEXTLN, EXTCDE
      USE W3TIMEMD
!/NCC      USE WW_cc, ONLY: MPI_COMM_WW
!/OASIS USE W3OACPMD, ONLY: CPL_OASIS_INIT, CPL_OASIS_GRID,            &
!/OASIS                     CPL_OASIS_DEFINE, CPL_OASIS_FINALIZE,      &
!/OASIS                     ID_OASIS_TIME
!/TIDE      USE W3TIDEMD
!
      IMPLICIT NONE
!
!/MPI      INCLUDE "mpif.h"
!/PALM     INCLUDE "palmlib.h"

      INTEGER           :: myTime(2)
      INTEGER           :: myComm
!
!! ! 7.a Determine next time interval and input fields
!! ! 7.a.1 Preparation
!! !
!!       TTIME  = TIMEN
!! !
!!       CALL STME21 ( TIME0 , DTME21 )
!!       IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,971) DTME21
!! !
!! !/T      WRITE (NDST,9070) '0-N', TIME0, TTIME,           &
!! !/T                        IDSTR(-7), INFLAGS1(-7), TI1,     &
!! !/T                        IDSTR(-6), INFLAGS1(-6), TI2,     &
!! !/T                        IDSTR(-5), INFLAGS1(-5), TI3,     &
!! !/T                        IDSTR(-4), INFLAGS1(-4), TI4,     &
!! !/T                        IDSTR(-3), INFLAGS1(-3), TI5,     &
!! !/T                        IDSTR(-2), INFLAGS1(-2), TZN,     &
!! !/T                        IDSTR(-1), INFLAGS1(-1), TTN,     &
!! !/T                        IDSTR(0), INFLAGS1(0), TVN,       &
!! !/T                        IDSTR(1), INFLAGS1(1), TLN,       &
!! !/T                        IDSTR(2), INFLAGS1(2), TC0, TCN,  &
!! !/T                        IDSTR(3), INFLAGS1(3), TW0, TWN,  &
!! !/T                        IDSTR(4), INFLAGS1(4), TIN,       &
!! !/T                        IDSTR(5), INFLAGS1(5), T0N,       &
!! !/T                        IDSTR(6), INFLAGS1(6), T1N,       &
!! !/T                        IDSTR(7), INFLAGS1(7), T2N,       &
!! !/T                        IDSTR(8), INFLAGS1(8), TG0, TGN
!! !
!! 
!!       DO J=JFIRST,8
!! !
!!         IF ( INFLAGS1(J) ) THEN
!! !
!! ! 7.a.2 Check if update is needed
!!             IF (.NOT.FLAGSC(J)) THEN 
!!               TTT(1) = TFN(1,J)
!!               TTT(2) = TFN(2,J)
!!               IF ( TTT(1) .EQ. -1 ) THEN
!!                 DTTST  = 0.
!!               ELSE
!!                 DTTST  = DSEC21 ( TIME0 , TTT )
!!               END IF
!!             ELSE 
!! !/OASIS             ID_OASIS_TIME = DSEC21 ( TIME00 , TIME )
!! !/OASIS             IF ( (MOD(ID_OASIS_TIME/DTOUT(7),1.0) .LT. 1.E-7 ) .AND. &
!! !/OASIS                  (DSEC21 (TIME, TIMEEND) .GT. 0.0)) DTTST=0.
!!              END IF
!! !
!! !/T            WRITE (NDST,9071) IDSTR(J), DTTST
!! !
!! ! 7.a.3 Update time and fields / data
!! !
!!             PRINT *, "NDST, NDSEN is: ", NDST, NDSEN
!! 
!! 
!!             IF ( DTTST .LE. 0. ) THEN
!! !/TIDE                 IF ((FLLEVTIDE .AND.(J.EQ.1)).OR.(FLCURTIDE.AND.(J.EQ.2))) THEN 
!! !/TIDE                   IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,974) IDFLDS(J)
!! !/TIDE                 ELSE
!!                 IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,972) IDFLDS(J)
!! !/TIDE                 END IF
!! !
!! ! IC1 : (in context of IC3, this is ice thickness)
!!                 IF ( J .EQ. -7 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TTT, XXX, XXX, XXX, TI1, XXX, XXX, ICEP1, IERR)
!!                    ELSE
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TTT, XXX, XXX, XXX, TI1, XXX, XXX, ICEP1, IERR)
!!                    END IF
!!                    IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
!! ! IC2 : (in context of IC3, this is ice viscosity)
!!                 ELSE IF ( J .EQ. -6 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TTT, XXX, XXX, XXX, TI2, XXX, XXX, ICEP2, IERR)
!!                    ELSE
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TTT, XXX, XXX, XXX, TI2, XXX, XXX, ICEP2, IERR)
!!                    END IF
!!                    IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
!! ! IC3 : (in context of IC3, this is ice density)
!!                 ELSE IF ( J .EQ. -5 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TTT, XXX, XXX, XXX, TI3, XXX, XXX, ICEP3, IERR)
!!                    ELSE
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TTT, XXX, XXX, XXX, TI3, XXX, XXX, ICEP3, IERR)
!!                    END IF
!!                    IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
!! ! IC4 : (in context of IC3, this is ice modulus)
!!                 ELSE IF ( J .EQ. -4 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TTT, XXX, XXX, XXX, TI4, XXX, XXX, ICEP4, IERR)
!!                    ELSE
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TTT, XXX, XXX, XXX, TI4, XXX, XXX, ICEP4, IERR)
!!                    END IF
!!                    IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
!! ! IC5 : ice flow diam.
!!                 ELSE IF ( J .EQ. -3 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TTT, XXX, XXX, XXX, TI5, XXX, XXX, ICEP5, IERR)
!!                    ELSE
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TTT, XXX, XXX, XXX, TI5, XXX, XXX, ICEP5, IERR)
!!                    END IF
!!                    IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
!! ! MUD1 : mud density
!!                 ELSE IF ( J .EQ. -2 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TTT, XXX, XXX, XXX, TZN, XXX, XXX, MUDD, IERR)
!!                    ELSE
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TTT, XXX, XXX, XXX, TZN, XXX, XXX, MUDD, IERR)
!!                    END IF
!!                    IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
!! ! MUD2 : mud thickness
!!                 ELSE IF ( J .EQ. -1 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TTT, XXX, XXX, XXX, TTN, XXX, XXX, MUDT, IERR)
!!                    ELSE
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TTT, XXX, XXX, XXX, TTN, XXX, XXX, MUDT, IERR)
!!                    END IF
!!                    IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
!! ! MUD3 : mud viscosity
!!                 ELSE IF ( J .EQ. 0 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TTT, XXX, XXX, XXX, TVN, XXX, XXX, MUDV, IERR)
!!                    ELSE
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TTT, XXX, XXX, XXX, TVN, XXX, XXX, MUDV, IERR)
!!                    END IF
!!                    IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
!! ! LEV : water levels
!!                 ELSE IF ( J .EQ. 1 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TTT, XXX, XXX, XXX, TLN, XXX, XXX, WLEV, IERR)
!!                    ELSE
!! !/TIDE                        IF ( FLLEVTIDE ) THEN 
!! !/TIDE                          IERR=0
!! !/TIDE                          IF ( TLN(1) .EQ. -1 ) THEN 
!! !/TIDE                            TLN = TIME 
!! !/TIDE                          ELSE 
!! !/TIDE                            CALL TICK21 ( TLN, TIDE_DT )
!! !/TIDE                            END IF
!! !/TIDE                        ELSE
!! !/OASIS                 COUPL_COMM = MPI_COMM
!! !/OASOCM                IF (.NOT.FLAGSC(J)) ID_OASIS_TIME = -1
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TTT, XXX, XXX, XXX, TLN, XXX, XXX, WLEV,   &
!!                            IERR                                       &
!! !/OASOCM                   , COUPL_COMM                               &
!!                            )
!! !/TIDE                          END IF
!!                    END IF
!!                    IF ( IERR .LT. 0 ) FLLSTL = .TRUE.
!! !could use this:   IF ( IERR .LT. 0 ) FLLST_ALL(J) = .TRUE.
!! ! CUR : currents
!!                 ELSE IF ( J .EQ. 2 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TC0, CX0, CY0, XXX, TCN, CXN, CYN, XXX, IERR)
!!                    ELSE
!! !/TIDE                        IF ( FLCURTIDE ) THEN 
!! !/TIDE                          IERR=0
!! !/TIDE                          IF ( TCN(1) .EQ. -1 ) THEN 
!! !/TIDE                            TCN = TIME 
!! !/TIDE                            END IF
!! !/TIDE                          TC0(:) = TCN(:)               
!! !/TIDE                          CALL TICK21 ( TCN, TIDE_DT )
!! !/TIDE                        ELSE
!! !/OASIS                 COUPL_COMM = MPI_COMM
!! !/OASOCM                IF (.NOT.FLAGSC(J)) ID_OASIS_TIME = -1
!! 
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TC0, CX0, CY0, XXX, TCN, CXN, CYN, XXX,    &
!!                            IERR                                       &
!! !/OASOCM                   , COUPL_COMM                               &
!!                            )
!! !/TIDE                          END IF
!!                    END IF
!! ! WND : winds
!!                 ELSE IF ( J .EQ. 3 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TW0, WX0, WY0, DT0, TWN, WXN, WYN, DTN, IERR)
!!                    ELSE
!! !/OASIS                 COUPL_COMM = MPI_COMM
!! !/OASACM                IF (.NOT.FLAGSC(J)) ID_OASIS_TIME = -1
!! !/NCC                        IF (.NOT.CFLAG(J)) THEN
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TW0, WX0, WY0, DT0, TWN, WXN, WYN, DTN,    &
!!                            IERR                                       &
!! !/OASACM                   , COUPL_COMM                               &
!!                            )
!! !/NCC                        END IF
!! !/NCC                        CALL WW_CDETECT(CFLAG(J))
!! !/NCC                        IF ( IAPROC .EQ. NAPOUT .AND. DEBUG_NCC )     &
!! !/NCC                             WRITE(9753) TW0, TWN
!! !/NCC                        CALL WW_UPDATE_WIND(TW0,TWN,WX0,WY0,WXN,WYN)
!! !/NCC                        IF ( IAPROC .EQ. NAPOUT .AND. DEBUG_NCC )     &
!! !/NCC                             WRITE(9751) TW0, TWN, WX0, WY0, WXN, WYN
!!                       END IF
!! ! ICE : ice conc.
!!                 ELSE IF ( J .EQ. 4 ) THEN
!! !/NCC                    IF (.NOT.CFLAG(J)) THEN
!!                    CALL W3FLDG ('READ', IDSTR(J), NDSF(J),            &
!!                         NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN,    &
!!                         TTT, XXX, XXX, XXX, TIN, XXX, BERGI, ICEI, IERR)
!!                    IF ( IERR .LT. 0 ) FLLSTI = .TRUE.
!! !could use this:   IF ( IERR .LT. 0 ) FLLST_ALL(J) = .TRUE.
!! !/NCC                    END IF
!! !/NCC                    CALL WW_CDETECT(CFLAG(J))
!! !/NCC                    IF ( IAPROC .EQ. NAPOUT .AND. DEBUG_NCC )    &
!! !/NCC                         WRITE(9753) TIN
!! !/NCC                    CALL WW_UPDATE_PSEUDOICE(TIN,ICEI)
!! !/NCC                    IF ( IAPROC .EQ. NAPOUT .AND. DEBUG_NCC )    &
!! !/NCC                         WRITE(9752) TIN, ICEI
!! ! Assim data
!!                 ELSE IF ( J .EQ. 5 ) THEN
!!                    CALL W3FLDD ('SIZE', IDSTR(J), NDSF(J), NDST,      &
!!                         NDSEN, TIME0, T0N, RCLD(J), NDT(J),           &
!!                         NDTNEW, DATA0, IERR )
!!                    IF ( IERR .LT. 0 ) THEN
!!                         INFLAGS1(J) = .FALSE.
!!                         IF ( ALLOCATED(DATA0) ) DEALLOCATE(DATA0)
!!                    ELSE
!!                         NDT(J) = NDTNEW
!!                         IF ( ALLOCATED(DATA0) ) DEALLOCATE(DATA0)
!!                         ALLOCATE ( DATA0(RCLD(J),NDT(J)) )
!!                         CALL W3FLDD ('READ', IDSTR(J), NDSF(J), NDST, &
!!                              NDSEN, TIME0, T0N, RCLD(J), NDT(J),      &
!!                              NDTNEW, DATA0, IERR )
!!                    END IF
!! ! Assim data
!!                 ELSE IF ( J .EQ. 6 ) THEN
!!                    CALL W3FLDD ('SIZE', IDSTR(J), NDSF(J), NDST,      &
!!                         NDSEN, TIME0, T1N, RCLD(J), NDT(J),           &
!!                         NDTNEW, DATA1, IERR )
!!                    IF ( IERR .LT. 0 ) THEN
!!                         INFLAGS1(J) = .FALSE.
!!                         IF ( ALLOCATED(DATA1) ) DEALLOCATE(DATA1)
!!                    ELSE
!!                         NDT(J) = NDTNEW
!!                         IF ( ALLOCATED(DATA1) ) DEALLOCATE(DATA1)
!!                         ALLOCATE ( DATA1(RCLD(J),NDT(J)) )
!!                         CALL W3FLDD ('READ', IDSTR(J), NDSF(J), NDST, &
!!                              NDSEN, TIME0, T1N, RCLD(J), NDT(J),      &
!!                              NDTNEW, DATA1, IERR )
!!                    END IF
!! ! Assim data
!!                 ELSE IF ( J .EQ. 7 ) THEN
!!                    CALL W3FLDD ('SIZE', IDSTR(J), NDSF(J), NDST,      &
!!                         NDSEN, TIME0, T2N, RCLD(J), NDT(J),           &
!!                         NDTNEW, DATA2, IERR )
!!                    IF ( IERR .LT. 0 ) THEN
!!                         INFLAGS1(J) = .FALSE.
!!                         IF ( ALLOCATED(DATA2) ) DEALLOCATE(DATA2)
!!                    ELSE
!!                         NDT(J) = NDTNEW
!!                         IF ( ALLOCATED(DATA2) ) DEALLOCATE(DATA2)
!!                         ALLOCATE ( DATA2(RCLD(J),NDT(J)) )
!!                         CALL W3FLDD ('READ', IDSTR(J), NDSF(J), NDST, &
!!                              NDSEN, TIME0, T2N, RCLD(J), NDT(J),      &
!!                              NDTNEW, DATA2, IERR )
!!                    END IF
!! ! Track
!!                 ELSE IF ( J .EQ. 8 ) THEN
!!                    CALL W3FLDM (4, NDST, NDSEN, TIME0, TIMEN, NH(4),  &
!!                            NHMAX, THO, HA, HD, TG0, GA0, GD0,         &
!!                            TGN, GAN, GDN, IERR)
!!                 END IF
!! !
!!                 IF ( IERR.GT.0 ) GOTO 2222
!!                 IF ( IERR.LT.0 .AND. IAPROC.EQ.NAPOUT )               &
!!                                  WRITE (NDSO,973) IDFLDS(J)
!! !
!!               END IF
!! !
!! ! 7.a.4 Update next ending time
!! !
!!             IF ( INFLAGS1(J) ) THEN
!!                 TTT    = TFN(:,J)
!!                 DTTST  = DSEC21 ( TTT , TTIME )
!!                 IF ( DTTST.GT.0. .AND. .NOT.                          &
!!                        ( (FLLSTL .AND. J.EQ.1) .OR.                   &
!!                          (FLLST_ALL(J) .AND. J.EQ.-7) .OR.            &
!!                          (FLLST_ALL(J) .AND. J.EQ.-6) .OR.            &
!!                          (FLLST_ALL(J) .AND. J.EQ.-5) .OR.            &
!!                          (FLLST_ALL(J) .AND. J.EQ.-4) .OR.            &
!!                          (FLLST_ALL(J) .AND. J.EQ.-3) .OR.            &
!!                          (FLLST_ALL(J) .AND. J.EQ.-2) .OR.            &
!!                          (FLLST_ALL(J) .AND. J.EQ.-1) .OR.            &
!!                          (FLLST_ALL(J) .AND. J.EQ.0 ) .OR.            &
!!                          (FLLSTI .AND. J.EQ.4) ) ) THEN
!!                     TTIME  = TTT
!! ! notes: if model has run out beyond field input, then this line should not 
!! !    be reached. 
!!                   END IF
!!               END IF
!! !
!!           END IF
!! !
!!         END DO ! J=JFIRST,8
!! !
!! ! update the next assimilation data time
!! 
!!       TDN = TTIME
!!       CALL TICK21 ( TDN, 1. )
!!       DO J=5, 7
!!         IF ( INFLAGS1(J) ) THEN
!!             TTT    = TFN(:,J)
!!             DTTST  = DSEC21 ( TTT , TDN )
!!             IF ( DTTST.GT.0. ) TDN = TTT
!!           END IF
!!         END DO
!! !
!! !/T      WRITE (NDST,9072) '0-N', TIME0, TTIME,           &
!! !/T                        IDSTR(-7), INFLAGS1(-7), TI1,     &
!! !/T                        IDSTR(-6), INFLAGS1(-6), TI2,     &
!! !/T                        IDSTR(-5), INFLAGS1(-5), TI3,     &
!! !/T                        IDSTR(-4), INFLAGS1(-4), TI4,     &
!! !/T                        IDSTR(-3), INFLAGS1(-3), TI5,     &
!! !/T                        IDSTR(-2), INFLAGS1(-2), TZN,     &
!! !/T                        IDSTR(-1), INFLAGS1(-1), TTN,     &
!! !/T                        IDSTR(0), INFLAGS1(0), TVN,       &
!! !/T                        IDSTR(1), INFLAGS1(1), TLN,       &
!! !/T                        IDSTR(2), INFLAGS1(2), TC0, TCN,  &
!! !/T                        IDSTR(3), INFLAGS1(3), TW0, TWN,  &
!! !/T                        IDSTR(4), INFLAGS1(4), TIN,       &
!! !/T                        IDSTR(5), INFLAGS1(5), T0N,       &
!! !/T                        IDSTR(6), INFLAGS1(6), T1N,       &
!! !/T                        IDSTR(7), INFLAGS1(7), T2N, TDN,  &
!! !/T                        IDSTR(8), INFLAGS1(8), TG0, TGN
!! !
!!       IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,*) ' '
!! !
!! ! 7.b Run the wave model for the given interval
!! !
!!       TIME0  = TTIME
!! 
!! !
!!       CALL W3WAVE ( 1, TIME0                                          &
!! !/OASIS             ,.TRUE., .FALSE., MPI_COMM                        &
!!                   )
!! !
!!       ! The following lines prevents us from trying to read past the end 
!!       ! of the files. This feature existed in v3.14.
!!       ! "1" is for water levels
!!       ! "4" is for ice concentration: 
!!       IF ( FLLSTL ) INFLAGS1(1) = .FALSE.
!!       IF ( FLLSTI ) INFLAGS1(4) = .FALSE.
!! 
!!       ! We include something like this for mud and ice parameters also:
!!       DO J=-7,0
!!          IF (FLLST_ALL(J))THEN
!!             INFLAGS1(J)=.FALSE.
!!          END IF
!!       END DO
!! 
!! !

      CALL W3WAVE ( 1, myTime                                          &
                  )

!!       INTEGER, PARAMETER  :: NHMAX =    200
!! !/
!! !/ ------------------------------------------------------------------- /
!! !/ Local parameters
!! !/
!! !/OASIS INTEGER :: OASISED
!! !/PALM  INTEGER :: PALMED
!!       INTEGER             :: NDSI, NDSI2, NDSS, NDSO, NDSE, NDST,     &
!!                              NDSF(-7:7), NDSEN, NDS(13), NTRACE(2),   &
!!                              TIME0(2), TIMEN(2), TTIME(2), TTT(2),    &
!!                              IERR, J, I, ODAT(35), ILOOP, NPTS,       &
!!                              NH(-7:4), THO(2,-7:4,NHMAX), RCLD(5:7),  &
!!                              NDT(5:7), NDTNEW, MPI_COMM = -99, JJ,    &
!!                              IPRT(6) = 0, IFI, IFJ
!! !/COU      INTEGER             :: OFL
!! !/F90      INTEGER             :: CLKDT1(8), CLKDT2(8), CLKDT3(8) 
!! !/MPI      INTEGER             :: IERR_MPI
!!       INTEGER             :: NODATA(5:7), FLAGTIDE
!!       INTEGER             :: COUPL_COMM
!!       REAL                :: FACTOR, DTTST, XX, YY,                   &
!!                              HA(NHMAX,-7:4), HD(NHMAX,-7:4),          &
!!                              HS(NHMAX,-7:4)
!! 
!! !/F90      REAL                :: CLKFIN, CLKFEL
!!       REAL, ALLOCATABLE   :: X(:), Y(:), XXX(:,:), DATA0(:,:),        &
!!                              DATA1(:,:), DATA2(:,:)
!!       LOGICAL             :: FLLSTL, FLLSTI, FLH(-7:8), FLFLG, FLHOM, &
!!                              TFLAGI, FLGDAS(3), FLGRD(NOGRP,NGRPP),   &
!!                              FLT, FLGD(NOGRP)
!!       LOGICAL             :: FLGR2(NOGRP,NGRPP), FLG2(NOGRP)
!!       LOGICAL             :: FLAGSTIDE(4)
!!       LOGICAL             :: PRTFRM
!!       LOGICAL             :: FLLST_ALL(-7:8)
!!       LOGICAL             :: DEBUG_NCC = .FALSE.
!! !/NCC      LOGICAL             :: CFLAG(10) 
!! !/OASIS LOGICAL                 :: L_MASTER    
!! 
!!       CHARACTER(LEN=1)    :: COMSTR,FLAGTFC
!!       CHARACTER(LEN=3)    :: IDSTR(-7:8), IDTST
!!       CHARACTER(LEN=6)    :: YESXNO
!!       CHARACTER(LEN=10)   :: PN
!!       CHARACTER(LEN=10),                                              &
!!               ALLOCATABLE :: PNAMES(:)
!!       CHARACTER(LEN=13)   :: IDFLDS(-7:8)
!!       CHARACTER(LEN=20)   :: STRNG
!!       CHARACTER(LEN=23)   :: DTME21
!!       CHARACTER(LEN=30)   :: IDOTYP(7)
!!       CHARACTER(LEN=80)   :: LINE
!!       CHARACTER(LEN=1024) :: FLDIN
!! !/COU      CHARACTER(LEN=30)       :: OFILE
!! !/
!! !/ ------------------------------------------------------------------- /
!! !/
!!       DATA IDFLDS / 'ice param. 1 ' , 'ice param. 2 ' ,               &
!!                     'ice param. 3 ' , 'ice param. 4 ' ,               &
!!                     'ice param. 5 ' ,                                 &
!!                     'mud density  ' , 'mud thkness  ' ,               &
!!                     'mud viscos.  ' ,                                 &
!!                     'water levels ' , 'currents     ' ,               &
!!                     'winds        ' , 'ice fields   ' ,               &
!!                     'mean param.  ' , '1D spectra   ' ,               &
!!                     '2D spectra   ' , 'moving grid  ' /
!!       DATA IDOTYP / 'Fields of mean wave parameters' ,                &
!!                     'Point output                  ' ,                &
!!                     'Track point output            ' ,                &
!!                     'Restart files                 ' ,                &
!!                     'Nesting data                  ' ,                &
!!                     'Partitioned wave field data   ' ,                &
!!                     'Fields for coupling           ' /
!!       DATA IDSTR  / 'IC1', 'IC2', 'IC3', 'IC4', 'IC5', 'MDN', 'MTH',  &
!!                     'MVS', 'LEV', 'CUR', 'WND', 'ICE', 'DT0', 'DT1',  &
!!                     'DT2', 'MOV' /
!! !
!! !     IF (FLAGLL) THEN
!! !         FACTOR = 1.
!! !       ELSE
!! !         FACTOR = 1.E-3
!! !       END IF
!! !
!!       FLAGSTIDE(:) = .FALSE.
!!       FLH(:)       = .FALSE.
!! !
!! !/T      PRTFRM = .TRUE.
!! !/T      DEBUG_NCC = .TRUE. 
!! !
!! !/F90      CALL DATE_AND_TIME ( VALUES=CLKDT1 )
!! !
!! !--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!! ! 0.  Set up data structures
!! !
!! !/PALM      PALMED=1
!! !/OASIS     OASISED=1
!! !  
!!       CALL W3NMOD ( 1, 6, 6 )
!!       CALL W3NDAT (    6, 6 )
!!       CALL W3NAUX (    6, 6 )
!!       CALL W3NOUT (    6, 6 )
!!       CALL W3NINP (    6, 6 )
!! !
!!       CALL W3SETG ( 1, 6, 6 )
!!       CALL W3SETW ( 1, 6, 6 )
!!       CALL W3SETA ( 1, 6, 6 )
!!       CALL W3SETO ( 1, 6, 6 )
!!       CALL W3SETI ( 1, 6, 6 )
!! !
!! !/SHRD      NAPROC = 1
!! !/SHRD      IAPROC = 1
!! !
!! !/OASIS IF (OASISED.EQ.1) THEN
!! !/OASIS   CALL CPL_OASIS_INIT(MPI_COMM)
!! !/OASIS ELSE
!! !/PALM  IF (PALMED.EQ.0) THEN 
!! !/MPI      CALL MPI_INIT      ( IERR_MPI )
!! !/MPI      MPI_COMM = MPI_COMM_WORLD
!! !/PALM  ELSE
!! !/PALM ! what if PALM but not MPI ???
!! !/PALM      MPI_COMM = PL_COMM_EXEC
!! !/PALM  ENDIF
!! !/OASIS END IF
!! !
!! !/NCC      CALL WW_CMP_START
!! !/NCC      MPI_COMM = MPI_COMM_WW
!! !
!! !/MPI      CALL MPI_COMM_SIZE ( MPI_COMM, NAPROC, IERR_MPI )
!! !/MPI      CALL MPI_COMM_RANK ( MPI_COMM, IAPROC, IERR_MPI )
!! !/MPI      IAPROC = IAPROC + 1
!! !
!! !/NCO/!     IF ( IAPROC .EQ. 1 ) CALL W3TAGB                         &
!! !/NCO/!                         ('WAVEFCST',1998,0007,0050,'NP21   ')
!! !
!! !--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!! ! 1.  IO set-up
!! ! 1.a For shell
!! !
!!       NDSI   = 10
!!       NDSS   = 90
!!       NDSO   =  6
!!       NDSE   =  6
!!       NDST   =  6
!! !/COU      NDSO   =  333
!! !/COU      NDSE   =  333
!! !/COU      NDST   =  333
!! 
!! 
!!       NDSF(-7)  = 1008
!!       NDSF(-6)  = 1009
!!       NDSF(-5)  = 1010
!!       NDSF(-4)  = 1011
!!       NDSF(-3)  = 1012
!!       NDSF(-2)  = 1013
!!       NDSF(-1)  = 1014
!!       NDSF(0)   = 1015
!! 
!!       NDSF(1)  = 11
!!       NDSF(2)  = 12
!!       NDSF(3)  = 13
!!       NDSF(4)  = 14
!!       NDSF(5)  = 15
!!       NDSF(6)  = 16
!!       NDSF(7)  = 17
!! !
!! !/NCO/!
!! !/NCO/! Redo according to NCO
!! !/NCO/!
!! !/NCO      NDSI   = 11
!! !/NCO      NDSS   = 90
!! !/NCO      NDSO   =  6
!! !/NCO      NDSE   = NDSO
!! !/NCO      NDST   = NDSO
!! !/NCO      NDSF(1)  = 12
!! !/NCO      NDSF(2)  = 13
!! !/NCO      NDSF(3)  = 14
!! !/NCO      NDSF(4)  = 15
!! !/NCO      NDSF(5)  = 16
!! !/NCO      NDSF(6)  = 17
!! !/NCO      NDSF(7)  = 18
!! !
!!       NAPOUT = 1
!!       NAPERR = 1
!! !
!! !/COU      OFILE  = 'output.ww3'
!! !/COU      OFL    = LEN_TRIM(OFILE)
!! !/COU      J      = LEN_TRIM(FNMPRE)
!! !/COU      IF ( IAPROC .EQ. NAPOUT )             &
!! !/COU        OPEN (333,FILE=FNMPRE(:J)//OFILE(:OFL),ERR=2008,IOSTAT=IERR)
!! 
!!       IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,900)
!! !
!!       IF ( IAPROC .EQ. NAPERR ) THEN
!!           NDSEN  = NDSE
!!         ELSE
!!           NDSEN  = -1
!!         END IF
!! !
!!       JJ     = LEN_TRIM(FNMPRE)
!!       OPEN (NDSI,FILE=FNMPRE(:JJ)//'ww3_shel.inp',STATUS='OLD',       &
!!             ERR=2000,IOSTAT=IERR)
!!       REWIND (NDSI)
!!       READ (NDSI,'(A)',END=2001,ERR=2002) COMSTR
!!       IF (COMSTR.EQ.' ') COMSTR = '$'
!! !
!!       IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,901) COMSTR
!! !
!! ! 1.b For WAVEWATCH III (See W3INIT)
!! !
!!       NDS( 1) = 20
!!       NDS( 2) =  6
!! !     NDS( 3) =  6
!!       NDS( 3) = 21
!!       NDS( 4) =  6
!!       NDS( 5) = 30
!!       NDS( 6) = 30
!!       NDS( 7) = 31
!!       NDS( 8) = 32
!!       NDS( 9) = 33
!!       NDS(10) = 35
!!       NDS(11) = 22
!!       NDS(12) = 23
!!       NDS(13) = 34
!! !
!!       NTRACE(1) =  NDS(3)
!!       NTRACE(2) =  10
!! !
!! !/NCO/!
!! !/NCO/! Redo according to NCO
!! !/NCO/!
!! !/NCO      NDS( 1) = 51
!! !/NCO      NDS( 2) = NDSO
!! !/NCO      NDS( 3) = NDSO
!! !/NCO      NDS( 4) = NDSO
!! !/NCO      NDS( 5) = 20
!! !/NCO      NDS( 6) = 21
!! !/NCO      NDS( 7) = 52
!! !/NCO      NDS( 8) = 53
!! !/NCO      NDS( 9) = 22
!! !/NCO      NDS(10) = 71
!! !/NCO      NDS(11) = 23
!! !/NCO      NDS(12) = 54
!! !/NCO      NDS(13) = 55
!! !/NCO      NTRACE(1) = NDSO
!! !
!! !/T      WRITE (NDST,9000) (NDS(I),I=1,12)
!! !/T      WRITE (NDST,9001) (NTRACE(I),I=1,2)
!! !
!! ! 1.c Local parameters
!! !
!! ! inferred from context: these flags (FL) are to indicate that the last (LST) 
!! !   field has been read from a file.
!!       FLLSTL = .FALSE. ! This is associated with J.EQ.1 (wlev)
!!       FLLSTI = .FALSE. ! This is associated with J.EQ.4 (ice)
!!       FLLST_ALL = .FALSE. ! For all
!! !
!! !--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!! ! 2.  Define input fields
!! !
!!       IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,920)
!! !
!! 
!! ! If using experimental mud or ice physics, additional lines will
!! !  be read in from ww3_shel.inp and applied, so JFIRST is changed from
!! !  its initialization setting "JFIRST=1" to some lower value.
!! !/IC1      JFIRST=-7
!! !/IC2      JFIRST=-7
!! !/IS2      JFIRST=-7
!! !/IC3      JFIRST=-7
!! !/BT8      JFIRST=-7
!! !/BT9      JFIRST=-7
!! !/IC4      JFIRST=-7
!! 
!!       DO J=JFIRST, 7
!!         CALL NEXTLN ( COMSTR , NDSI , NDSEN )
!!         IF ( J .LT. 4 ) THEN
!!             READ (NDSI,*,END=2001,ERR=2002) FLAGTFC, FLH(J)
!!             IF (FLAGTFC.EQ.'T') THEN 
!!               INFLAGS1(J)=.TRUE.
!!               FLAGSC(J)=.FALSE.
!!             END IF
!!             IF (FLAGTFC.EQ.'F') THEN 
!!               INFLAGS1(J)=.FALSE.
!!               FLAGSC(J)=.FALSE.
!!             END IF
!!             IF (FLAGTFC.EQ.'C') THEN 
!!               INFLAGS1(J)=.TRUE.
!!               FLAGSC(J)=.TRUE.
!!             END IF
!!             FLH(J) = FLH(J) .AND. INFLAGS1(J)
!!           ELSE
!!             READ (NDSI,*,END=2001,ERR=2002) INFLAGS1(J)
!!             FLH(J) = .FALSE.
!!           END IF
!!         IF ( INFLAGS1(J) ) THEN
!!             YESXNO = 'YES/--'
!!           ELSE
!!             YESXNO = '---/NO'
!!           END IF
!!         IF ( FLH(J) ) THEN
!!             STRNG  = '(homogeneous field) '
!!           ELSE IF ( FLAGSC(J) ) THEN
!!             STRNG  = '(coupling field) '
!!           ELSE
!!             STRNG  = '                    '
!!           END IF
!!         IF ( IAPROC .EQ. NAPOUT )                                     &
!!               WRITE (NDSO,921) IDFLDS(J), YESXNO, STRNG
!!         END DO
!! !
!!       INFLAGS1(8) = .FALSE.
!!       FLH(8)   = .FALSE.
!! !/MGW      INFLAGS1(8) = .TRUE.
!! !/MGP      INFLAGS1(8) = .TRUE.
!!       IF ( INFLAGS1(8) .AND. IAPROC.EQ.NAPOUT )                          &
!!            WRITE (NDSO,921) IDFLDS(8), 'YES/--', ' '
!! !
!!       FLFLG  = INFLAGS1(-7) .OR. INFLAGS1(-6) .OR. INFLAGS1(-5) .OR. INFLAGS1(-4) &
!!                .OR. INFLAGS1(-3) .OR. INFLAGS1(-2) .OR. INFLAGS1(-1)           &
!!                .OR. INFLAGS1(0)  .OR. INFLAGS1(1)  .OR. INFLAGS1(2)            &
!!                .OR. INFLAGS1(3)  .OR. INFLAGS1(4)  .OR. INFLAGS1(5)            &
!!                .OR. INFLAGS1(6)  .OR. INFLAGS1(7)
!!       FLHOM  = FLH(-7) .OR. FLH(-6) .OR. FLH(-5) .OR. INFLAGS1(-4)       &
!!                .OR. FLH(-3) .OR. FLH(-2) .OR. FLH(-1) .OR. INFLAGS1(0)   &
!!                .OR. FLH(1) .OR. FLH(2) .OR. FLH(3) .OR. INFLAGS1(8)
!! !
!!       IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,922)
!! !
!! !     INFLAGS2 is just "initial value of INFLAGS1", i.e. does *not* get
!! !        changed when model reads last record of ice.ww3
!!       INFLAGS2=INFLAGS1
!! 
!! !/T      WRITE (NDST,9020) FLFLG, INFLAGS1, FLHOM, FLH
!! !
!! !--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!! ! 3.  Set time frame
!! !
!!       IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,930)
!! !
!!       CALL NEXTLN ( COMSTR , NDSI , NDSEN )
!!       READ (NDSI,*,END=2001,ERR=2002) TIME0
!!       CALL STME21 ( TIME0 , DTME21 )
!!       IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,931) DTME21
!!       TIME = TIME0
!! !/OASIS      TIME00 = TIME0
!! !
!!       CALL NEXTLN ( COMSTR , NDSI , NDSEN )
!!       READ (NDSI,*,END=2001,ERR=2002) TIMEN
!! !/OASIS      TIMEEND = TIMEN
!!       CALL STME21 ( TIMEN , DTME21 )
!!       IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,932) DTME21
!! !
!!       DTTST  = DSEC21 ( TIME0 , TIMEN )
!!       IF ( DTTST .LE. 0. ) GOTO 2003
!! !
!! !--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!! ! 4.  Define output
!! !
!!       CALL W3IOGR ( 'GRID', NDSF(5) )
!!       IF ( FLAGLL ) THEN
!!           FACTOR = 1.
!!         ELSE
!!           FACTOR = 1.E-3
!!         END IF
!! !
!!       CALL NEXTLN ( COMSTR , NDSI , NDSEN )
!!       READ (NDSI,*,END=2001,ERR=2002) IOSTYP
!!       IOSTYP = MAX ( 0 , MIN ( 3 , IOSTYP ) )
!! !
!!       IF ( IAPROC .EQ. NAPOUT ) THEN
!!           IF ( IOSTYP .EQ. 0 ) THEN
!!               WRITE (NDSO,940) 'No dedicated output process, ' //   &
!!                                'parallel file system required.'
!!           ELSE IF ( IOSTYP .EQ. 1 ) THEN
!!               WRITE (NDSO,940) 'No dedicated output process, ' //   &
!!                                'any file system.'
!!           ELSE IF ( IOSTYP .EQ. 2 ) THEN
!!               WRITE (NDSO,940) 'Single dedicated output process.'
!!           ELSE IF ( IOSTYP .EQ. 3 ) THEN
!!               WRITE (NDSO,940) 'Multiple dedicated output processes.'
!!           ELSE
!!               WRITE (NDSO,940) 'IOSTYP NOT RECOGNIZED'
!!           END IF
!!         END IF
!! !
!! ! 4.a Loop over types
!! !
!!       NPTS   = 0
!! !
!!       NOTYPE = 6
!! !/COU      NOTYPE = 7
!!       DO J = 1, NOTYPE
!! !
!! ! 4.b Process standard line
!! !
!!         CALL NEXTLN ( COMSTR , NDSI , NDSEN )
!!         READ (NDSI,*,END=2001,ERR=2002) (ODAT(I),I=5*(J-1)+1,5*J)
!!         ODAT(5*(J-1)+3) = MAX ( 0 , ODAT(5*(J-1)+3) )
!! !
!!         IF ( ODAT(5*(J-1)+3) .NE. 0 ) THEN
!!             IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,941) J, IDOTYP(J)
!!             TTIME(1) = ODAT(5*(J-1)+1)
!!             TTIME(2) = ODAT(5*(J-1)+2)
!!             CALL STME21 ( TTIME , DTME21 )
!!             IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,942) DTME21
!!             TTIME(1) = ODAT(5*(J-1)+4)
!!             TTIME(2) = ODAT(5*(J-1)+5)
!!             CALL STME21 ( TTIME , DTME21 )
!!             IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,943) DTME21
!!             TTIME(1) = 0
!!             TTIME(2) = 0
!!             DTTST    = REAL ( ODAT(5*(J-1)+3) )
!!             CALL TICK21 ( TTIME , DTTST  )
!!             CALL STME21 ( TTIME , DTME21 )
!!             IF ( ( ODAT(5*(J-1)+1) .NE. ODAT(5*(J-1)+4) .OR.          &
!!                    ODAT(5*(J-1)+2) .NE. ODAT(5*(J-1)+5) ) .AND.       &
!!                    IAPROC .EQ. NAPOUT ) THEN
!!                 IF ( DTME21(9:9) .NE. '0' ) THEN
!!                     WRITE (NDSO,1944) DTME21( 9:19)
!!                   ELSE IF ( DTME21(10:10) .NE. '0' ) THEN
!!                     WRITE (NDSO,2944) DTME21(10:19)
!!                   ELSE
!!                     WRITE (NDSO,3944) DTME21(12:19)
!!                   END IF
!!               END IF
!! !
!!             IF ( J .EQ. 1 ) THEN
!! !
!! ! 4.c Type 1: fields of mean wave parameters
!! !
!!               CALL W3READFLGRD ( NDSI, NDSO, 9, NDSEN, COMSTR, FLGD,   &
!!                                  FLGRD, IAPROC, NAPOUT, IERR )
!!               IF ( IERR .NE. 0 ) GOTO 2222
!! !
!!               ELSE IF ( J .EQ. 2 ) THEN
!! !
!! ! 4.d Type 2: point output
!! !
!!                 DO ILOOP=1, 2
!!                   JJ     = LEN_TRIM(FNMPRE)
!!                   IF ( ILOOP .EQ. 1 ) THEN
!!                       NDSI2  = NDSI
!!                       IF ( IAPROC .EQ. 1 ) OPEN                       &
!!                           (NDSS,FILE=FNMPRE(:JJ)//'ww3_shel.scratch')
!!                     ELSE
!!                       NDSI2  = NDSS
!! !/MPI                      CALL MPI_BARRIER (MPI_COMM,IERR_MPI)
!!                       OPEN (NDSS,FILE=FNMPRE(:JJ)//'ww3_shel.scratch')
!!                       REWIND (NDSS)
!! !
!!                       IF (NPTS.GT.0) THEN
!!                          ALLOCATE ( X(NPTS), Y(NPTS), PNAMES(NPTS) )
!!                       ELSE
!!                          GOTO 2004 
!!                       END IF
!!                     END IF
!! !
!!                   NPTS   = 0
!!                   DO
!!                     CALL NEXTLN ( COMSTR , NDSI , NDSEN )
!!                     READ (NDSI2,*,END=2001,ERR=2002) XX, YY, PN
!!                     IF ( ILOOP.EQ.1 .AND. IAPROC.EQ.1 ) THEN
!!                         BACKSPACE (NDSI)
!!                         READ (NDSI,'(A)') LINE
!!                         WRITE (NDSS,'(A)') LINE
!!                       END IF
!!                     IF ( PN .EQ. 'STOPSTRING' ) EXIT
!!                     NPTS   = NPTS + 1
!!                     IF ( ILOOP .EQ. 1 ) CYCLE
!!                     X(NPTS)      = XX
!!                     Y(NPTS)      = YY
!!                     PNAMES(NPTS) = PN
!!                     IF ( IAPROC .EQ. NAPOUT ) THEN
!!                         IF ( FLAGLL ) THEN
!!                             IF ( NPTS .EQ. 1 ) THEN
!!                                 WRITE (NDSO,2945)                     &
!!                                               FACTOR*XX, FACTOR*YY, PN
!!                               ELSE
!!                                 WRITE (NDSO,2946) NPTS,               &
!!                                               FACTOR*XX, FACTOR*YY, PN
!!                               END IF
!!                           ELSE
!!                             IF ( NPTS .EQ. 1 ) THEN
!!                                 WRITE (NDSO,2955)                     &
!!                                               FACTOR*XX, FACTOR*YY, PN
!!                               ELSE
!!                                 WRITE (NDSO,2956) NPTS,               &
!!                                               FACTOR*XX, FACTOR*YY, PN
!!                               END IF
!!                           END IF
!!                       END IF
!!                     END DO
!! !
!!                   IF ( IAPROC.EQ.1 .AND. ILOOP.EQ.1 ) CLOSE (NDSS)
!!                   END DO
!! !
!!                 IF ( NPTS.EQ.0 .AND. IAPROC.EQ.NAPOUT )               &
!!                      WRITE (NDSO,2947)
!!                 IF ( IAPROC .EQ. 1 ) THEN
!! !/MPI                    CALL MPI_BARRIER ( MPI_COMM, IERR_MPI )
!!                     CLOSE (NDSS,STATUS='DELETE')
!!                   ELSE
!!                     CLOSE (NDSS)
!! !/MPI                    CALL MPI_BARRIER ( MPI_COMM, IERR_MPI )
!!                   END IF
!! !
!!               ELSE IF ( J .EQ. 3 ) THEN
!! !
!! ! 4.e Type 3: track output
!! !
!!                 CALL NEXTLN ( COMSTR , NDSI , NDSEN )
!!                 READ (NDSI,*,END=2001,ERR=2002) TFLAGI
!! !
!!                 IF ( .NOT. TFLAGI ) NDS(11) = -NDS(11)
!!                 IF ( IAPROC .EQ. NAPOUT ) THEN
!!                     IF ( .NOT. TFLAGI ) THEN
!!                         WRITE (NDSO,3945) 'input', 'UNFORMATTED'
!!                       ELSE
!!                         WRITE (NDSO,3945) 'input', 'FORMATTED'
!!                       END IF
!!                   END IF
!! !
!!               ELSE IF ( J .EQ. 4 ) THEN
!! !
!! ! 4.f Type 4: restart files (no additional data)
!! !
!!               ELSE IF ( J .EQ. 5 ) THEN
!! !
!! ! 4.g Type 5: nesting data (no additional data)
!! !
!!               ELSE IF ( J .EQ. 6 ) THEN
!! !
!! ! 4.h Type 6: partitioning
!! !
!! !             IPRT: IX0, IXN, IXS, IY0, IYN, IYS
!! !
!!                 CALL NEXTLN ( COMSTR , NDSI , NDSEN )
!!                 READ (NDSI,*,END=2001,ERR=2002) IPRT, PRTFRM
!! !
!!                 IF ( IAPROC .EQ. NAPOUT ) THEN
!!                     IF ( PRTFRM ) THEN
!!                         YESXNO = 'YES/--'
!!                       ELSE
!!                         YESXNO = '---/NO'
!!                       END IF
!!                     WRITE (NDSO,6945) IPRT, YESXNO
!!                   END IF
!! !
!! !/COU              ELSE IF ( J .EQ. 7 ) THEN
!! !/COU !
!! !/COU ! 4.i Type 7: coupling
!! !/COU !
!! !/COU               CALL W3READFLGRD ( NDSI, NDSO, 9, NDSEN, COMSTR, FLG2,     &
!! !/COU                                  FLGR2, IAPROC, NAPOUT, IERR )
!! !/COU               IF ( IERR .NE. 0 ) GOTO 2222
!! !/COU               CALL NEXTLN ( COMSTR , NDSI , NDSEN )
!! !/COU               READ (NDSI,'(A)',END=2001,ERR=2003,IOSTAT=IERR) FLDIN
!! !
!!               END IF
!! !
!!           END IF
!! !
!!         END DO
!! !
!!       IF ( NPTS.EQ.0 ) ALLOCATE ( X(1), Y(1), PNAMES(1) )
!! !
!! !/T      WRITE (NDST,9040) ODAT
!! !/T      WRITE (NDST,9041) FLGRD
!! !/T      WRITE (NDST,9042) IPRT, PRTFRM
!! !
!! ! ... End loop over output types
!! !
!! ! For outputs with non-zero time step, check dates :
!! ! If output ends before run start OR output starts after run end,
!! ! deactivate output cleanly with output time step = 0
!! ! This is usefull for IOSTYP=3 (Multiple dedicated output processes)
!! ! to avoid the definition of dedicated proc. for unused output.
!! !
!!       DO J = 1, NOTYPE
!!         DTTST  = DSEC21 ( TIME0 , ODAT(5*(J-1)+4:5*(J-1)+5) )
!!         IF ( DTTST .LT. 0 ) THEN
!!           ODAT(5*(J-1)+3) = 0
!!           IF ( IAPROC .EQ. NAPOUT )  WRITE (NDSO,8945) trim(IDOTYP(J))
!!           CONTINUE
!!         ENDIF
!!         DTTST  = DSEC21 ( ODAT(5*(J-1)+1:5*(J-1)+2), TIMEN )
!!         IF ( DTTST .LT. 0 ) THEN
!!           ODAT(5*(J-1)+3) = 0
!!           IF ( IAPROC .EQ. NAPOUT )  WRITE (NDSO,8945) trim(IDOTYP(J))
!!           CONTINUE
!!         ENDIF
!!       ENDDO
!! !
!! !--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!! ! 5.  Initializations
!! !
!!       IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,950)
!! 
!! !
!! ! 5.a Opening field and data files
!! !
!!       IF ( FLFLG ) THEN
!!           IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,951)                  &
!!                                           'Preparing input files ...'
!! !
!! 
!!           DO J=JFIRST, 4
!!             IF ( INFLAGS1(J) .AND. .NOT. FLAGSC(J)) THEN
!!                 IF ( FLH(J) ) THEN
!!                     IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,954) IDFLDS(J)
!!                   ELSE
!!                     JJ     = LEN_TRIM(FNMPRE)
!!                     FLAGTIDE = 0
!!                     CALL W3FLDO ('READ', IDSTR(J), NDSF(J), NDST,     &
!!                                   NDSEN, NX, NY, GTYPE,               &
!!                                   IERR, FPRE=FNMPRE(:JJ), TIDEFLAGIN=FLAGTIDE )
!!                     IF ( IERR .NE. 0 ) GOTO 2222
!! !/TIDE                    IF (FLAGTIDE.GT.0.AND.J.EQ.1) FLAGSTIDE(1)=.TRUE.
!! !/TIDE                    IF (FLAGTIDE.GT.0.AND.J.EQ.2) FLAGSTIDE(2)=.TRUE.
!!                     IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,955) IDFLDS(J)
!!                   END IF
!!               ELSE
!!                 IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,954) IDFLDS(J)
!!               END IF
!!           END DO
!! !
!!           DO J=5, 7
!!             IF ( INFLAGS1(J) .AND. .NOT. FLAGSC(J)) THEN
!!                 CALL W3FLDO ('READ', IDSTR(J), NDSF(J), NDST, NDSEN, &
!!                              RCLD(J), NY, NODATA(J),                 &
!!                              IERR, FPRE=FNMPRE(:JJ) )
!!                 IF ( IERR .NE. 0 ) GOTO 2222
!!                 IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,956) IDFLDS(J),&
!!                              RCLD(J), NODATA(J)
!!               ELSE
!!                 IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,954) IDFLDS(J)
!!               END IF
!!           END DO
!! !
!!         END IF
!! 
!! !
!! ! 5.b Wave model
!! !
!!       IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,951) 'Wave model ...'
!! !
!! !/TIDE      IF (FLAGSTIDE(1).OR.FLAGSTIDE(2)) THEN 
!! !/TIDE        CALL VUF_SET_PARAMETERS
!! !/TIDE        IF (FLAGSTIDE(1)) CALL W3FLDTIDE1 ( 'READ',  NDSF(1), NDST, NDSEN, NX, NY, IDSTR(1), IERR )
!! !/TIDE        IF (FLAGSTIDE(2)) CALL W3FLDTIDE1 ( 'READ',  NDSF(2), NDST, NDSEN, NX, NY, IDSTR(2), IERR )
!! !/TIDE        END IF
!! ! 
!!      CALL W3INIT ( 1, 'ww3', NDS, NTRACE, ODAT, FLGRD, FLGR2, FLGD,    &
!!                    FLG2, NPTS, X, Y, PNAMES, IPRT, PRTFRM, MPI_COMM,   &
!!                    FLAGSTIDEIN=FLAGSTIDE )
!! !
!! !/TIDE      IF (FLAGSTIDE(1)) CALL W3FLDTIDE2 ( 'READ',  NDSF(1), NDST, NDSEN, NX, NY, IDSTR(1), 1, IERR )
!! !/TIDE      IF (FLAGSTIDE(2)) CALL W3FLDTIDE2 ( 'READ',  NDSF(2), NDST, NDSEN, NX, NY, IDSTR(2), 1, IERR )
!! !/TIDE      ALLOCATE(V_ARG(170,1),F_ARG(170,1),U_ARG(170,1))  ! to be removed later ...
!! !
!!       ALLOCATE ( XXX(NX,NY) )
!! !
!! ! 5.c Homogeneous field data
!! !
!!       IF ( FLHOM ) THEN
!!           IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,951)                  &
!!                         'Homogeneous field data (and moving grid) ...'
!!           NH     = 0
!! !
!! ! ... Start of loop.
!! !
!!           DO
!!             CALL NEXTLN ( COMSTR , NDSI , NDSEN )
!!             READ (NDSI,*,END=2001,ERR=2002) IDTST
!! 
!!             IF ( IDTST.NE.IDSTR(-7) .AND. IDTST.NE.IDSTR(-6) .AND.   &
!!                  IDTST.NE.IDSTR(-5) .AND. IDTST.NE.IDSTR(-4) .AND.   &
!!                  IDTST.NE.IDSTR(-3) .AND. IDTST.NE.IDSTR(-2) .AND.   &
!!                  IDTST.NE.IDSTR(-1) .AND. IDTST.NE.IDSTR(0)  .AND.   &
!!                  IDTST.NE.IDSTR(1)  .AND. IDTST.NE.IDSTR(2)  .AND.   &
!!                  IDTST.NE.IDSTR(3)  .AND. IDTST.NE.IDSTR(8)  .AND.   &
!!                  IDTST.NE.'STP' ) GOTO 2005
!! 
!! !
!! ! ... Stop conditions
!! !
!!             IF ( IDTST .EQ. 'STP' ) THEN
!!                 EXIT
!!               ELSE
!!                 BACKSPACE ( NDSI )
!!               END IF
!! !
!! ! ... Store data
!! !
!!             DO J=LBOUND(IDSTR,1), 4
!!               I      = J
!!               IF ( J .EQ. 4 ) I = 8
!!               IF ( IDTST .EQ. IDSTR(I) ) THEN
!!                   NH(J)    = NH(J) + 1
!!                   IF ( NH(J) .GT. NHMAX ) GOTO 2006
!!                   IF ( J .LE. 1  ) THEN ! water levels, etc. : get HS
!!                      READ (NDSI,*,END=2001,ERR=2002) IDTST,           &
!!                            THO(1,J,NH(J)), THO(2,J,NH(J)),            &
!!                            HS(NH(J),J)
!!                     ELSE IF ( J .EQ. 2 ) THEN ! currents: get HA and HD
!!                      READ (NDSI,*,END=2001,ERR=2002) IDTST,           &
!!                            THO(1,J,NH(J)), THO(2,J,NH(J)),            &
!!                            HA(NH(J),J), HD(NH(J),J)
!!                     ELSE IF ( J .EQ. 3 ) THEN ! wind: get HA HD and HS
!!                      READ (NDSI,*,END=2001,ERR=2002) IDTST,           &
!!                            THO(1,J,NH(J)), THO(2,J,NH(J)),            &
!!                            HA(NH(J),J), HD(NH(J),J), HS(NH(J),J)
!!                     ELSE IF ( J .EQ. 4 ) THEN ! ice: HA and HD
!!                      READ (NDSI,*,END=2001,ERR=2002) IDTST,           &
!!                            THO(1,J,NH(J)), THO(2,J,NH(J)),            &
!!                            HA(NH(J),J), HD(NH(J),J)
!!                     END IF
!!                 END IF
!!               END DO
!! !
!!             END DO
!! !
!! ! ... End of loop, output
!! !
!! !/O7          DO J=JFIRST, 3
!! !/O7            IF ( FLH(J) .AND. IAPROC.EQ.NAPOUT ) THEN
!! !/O7                WRITE (NDSO,952) NH(J), IDFLDS(J)
!! !/O7                DO I=1, NH(J)
!! !/O7                  IF ( J .LE. 1 ) THEN
!! !/O7                      WRITE (NDSO,953) I, THO(1,J,I), THO(2,J,I), &
!! !/O7                                          HS(I,J)
!! !/O7                    ELSE IF ( J .EQ. 2 ) THEN
!! !/O7                      WRITE (NDSO,953) I, THO(1,J,I), THO(2,J,I), &
!! !/O7                                          HA(I,J), HD(I,J)
!! !/O7                    ELSE IF ( J .EQ. 3 ) THEN
!! !/O7                      WRITE (NDSO,953) I, THO(1,J,I), THO(2,J,I), &
!! !/O7                                          HA(I,J), HD(I,J), HS(I,J)
!! !/O7                    END IF
!! !/O7                  END DO
!! !/O7              END IF
!! !/O7            END DO
!! !
!! !/O7          IF ( INFLAGS1(8) .AND. IAPROC.EQ.NAPOUT ) THEN
!! !/O7              WRITE (NDSO,952) NH(4), IDFLDS(8)
!! !/O7              DO I=1, NH(J)
!! !/O7                WRITE (NDSO,953) I, THO(1,4,I), THO(2,4,I),       &
!! !/O7                                    HA(I,4), HD(I,4)
!! !/O7                END DO
!! !/O7              END IF
!! !
!!           IF ( ( FLH(-7) .AND. (NH(-7).EQ.0) ) .OR.                     &
!!                ( FLH(-6) .AND. (NH(-6).EQ.0) ) .OR.                     &
!!                ( FLH(-5) .AND. (NH(-5).EQ.0) ) .OR.                     &
!!                ( FLH(-4) .AND. (NH(-4).EQ.0) ) .OR.                     &
!!                ( FLH(-3) .AND. (NH(-3).EQ.0) ) .OR.                     &
!!                ( FLH(-2) .AND. (NH(-2).EQ.0) ) .OR.                     &
!!                ( FLH(-1) .AND. (NH(-1).EQ.0) ) .OR.                     &
!!                ( FLH(0)  .AND. (NH(0).EQ.0)  ) .OR.                     &
!!                ( FLH(1)  .AND. (NH(1).EQ.0)  ) .OR.                     &
!!                ( FLH(2)  .AND. (NH(2).EQ.0)  ) .OR.                     &
!!                ( FLH(3)  .AND. (NH(3).EQ.0)  ) .OR.                     &
!!                ( INFLAGS1(8) .AND. (NH(4).EQ.0) ) ) GOTO 2007
!! !
!!         END IF
!! !
!! !/MPI      CALL MPI_BARRIER ( MPI_COMM, IERR_MPI )
!! !
!!       IF ( IAPROC .EQ. NAPOUT ) THEN
!! !/F90          CALL DATE_AND_TIME ( VALUES=CLKDT2 )
!!         END IF
!! !--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!! !
!! !/OASIS ! Initialize L_MASTER, COUPL_COMM
!! !/OASIS      IF ( IAPROC .EQ. 1) THEN
!! !/OASIS         L_MASTER = .TRUE.
!! !/OASIS      ELSE
!! !/OASIS         L_MASTER = .FALSE.
!! !/OASIS      ENDIF 
!! !/OASIS      CALL CPL_OASIS_GRID(L_MASTER,MPI_COMM)
!! !/OASIS ! Estimate the weights for the spatial interpolation
!! !/OASIS      CALL CPL_OASIS_DEFINE(NDSO, FLDIN, FLDOUT)
!! 
!! !--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!! ! 6.  Model without input
!! !
!!       IF ( .NOT. FLFLG ) THEN
!! !
!!           IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,960)
!!           CALL W3WAVE ( 1, TIMEN                      &
!! !/OASIS                 ,.TRUE., .FALSE., MPI_COMM    &
!!                       )
!! !
!!           GOTO 2222
!! !
!!         END IF
!! !--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!! ! 7.  Model with input
!! !
!!       IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,970)
!! !
!! !/NCC      CFLAG = .FALSE. 
!! !/NCC      CALL WW_INIT(1,GRIDS(1)%NX,GRIDS(1)%NY,            &
!! !/NCC      GRIDS(1)%X0,GRIDS(1)%Y0,GRIDS(1)%SX,GRIDS(1)%SY)
!! !/NCC      CALL WW_RECVDTC
!! !/NCC      CALL WW_SENDGRIDS
!! !/NCC      CALL WW_SENDSLM(GRIDS(1)%MAPSTA)
!! !/NCC      IF ( IAPROC .EQ. NAPOUT .AND. DEBUG_NCC ) THEN
!! !/NCC         OPEN(9751,FILE='debug_writeout_wind',           &
!! !/NCC              FORM='UNFORMATTED',STATUS='UNKNOWN')
!! !/NCC         OPEN(9752,FILE='debug_writeout_ice',            &
!! !/NCC              FORM='UNFORMATTED',STATUS='UNKNOWN')
!! !/NCC         OPEN(9753,FILE='data_forDC',                    &
!! !/NCC              FORM='UNFORMATTED',STATUS='UNKNOWN')
!! !/NCC         WRITE(9753) GRIDS(1)%NX,GRIDS(1)%NY,            &
!! !/NCC           GRIDS(1)%X0,GRIDS(1)%Y0,GRIDS(1)%SX,GRIDS(1)%SY
!! !/NCC         WRITE(9753) GRIDS(1)%MAPSTA
!! !/NCC      END IF
!!   700 CONTINUE
!! !
!! !/NCC      IF ( IAPROC .EQ. NAPOUT .AND. DEBUG_NCC ) WRITE(9753) TIME0
!! !/NCC      CALL WW_TSTEP_INIT(TIME0)
!! !/NCC      CALL WW_RECV_SBC
!! !/NCC      CALL WW_RECV_PSEUDOICE
!! !
!! ! 7.a Determine next time interval and input fields
!! ! 7.a.1 Preparation
!! !
!!       TTIME  = TIMEN
!! !
!!       CALL STME21 ( TIME0 , DTME21 )
!!       IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,971) DTME21
!! !
!! !/T      WRITE (NDST,9070) '0-N', TIME0, TTIME,           &
!! !/T                        IDSTR(-7), INFLAGS1(-7), TI1,     &
!! !/T                        IDSTR(-6), INFLAGS1(-6), TI2,     &
!! !/T                        IDSTR(-5), INFLAGS1(-5), TI3,     &
!! !/T                        IDSTR(-4), INFLAGS1(-4), TI4,     &
!! !/T                        IDSTR(-3), INFLAGS1(-3), TI5,     &
!! !/T                        IDSTR(-2), INFLAGS1(-2), TZN,     &
!! !/T                        IDSTR(-1), INFLAGS1(-1), TTN,     &
!! !/T                        IDSTR(0), INFLAGS1(0), TVN,       &
!! !/T                        IDSTR(1), INFLAGS1(1), TLN,       &
!! !/T                        IDSTR(2), INFLAGS1(2), TC0, TCN,  &
!! !/T                        IDSTR(3), INFLAGS1(3), TW0, TWN,  &
!! !/T                        IDSTR(4), INFLAGS1(4), TIN,       &
!! !/T                        IDSTR(5), INFLAGS1(5), T0N,       &
!! !/T                        IDSTR(6), INFLAGS1(6), T1N,       &
!! !/T                        IDSTR(7), INFLAGS1(7), T2N,       &
!! !/T                        IDSTR(8), INFLAGS1(8), TG0, TGN
!! !
!! 
!!       DO J=JFIRST,8
!! !
!!         IF ( INFLAGS1(J) ) THEN
!! !
!! ! 7.a.2 Check if update is needed
!!             IF (.NOT.FLAGSC(J)) THEN 
!!               TTT(1) = TFN(1,J)
!!               TTT(2) = TFN(2,J)
!!               IF ( TTT(1) .EQ. -1 ) THEN
!!                 DTTST  = 0.
!!               ELSE
!!                 DTTST  = DSEC21 ( TIME0 , TTT )
!!               END IF
!!             ELSE 
!! !/OASIS             ID_OASIS_TIME = DSEC21 ( TIME00 , TIME )
!! !/OASIS             IF ( (MOD(ID_OASIS_TIME/DTOUT(7),1.0) .LT. 1.E-7 ) .AND. &
!! !/OASIS                  (DSEC21 (TIME, TIMEEND) .GT. 0.0)) DTTST=0.
!!              END IF
!! !
!! !/T            WRITE (NDST,9071) IDSTR(J), DTTST
!! !
!! ! 7.a.3 Update time and fields / data
!! !
!! 
!!             IF ( DTTST .LE. 0. ) THEN
!! !/TIDE                 IF ((FLLEVTIDE .AND.(J.EQ.1)).OR.(FLCURTIDE.AND.(J.EQ.2))) THEN 
!! !/TIDE                   IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,974) IDFLDS(J)
!! !/TIDE                 ELSE
!!                 IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,972) IDFLDS(J)
!! !/TIDE                 END IF
!! !
!! ! IC1 : (in context of IC3, this is ice thickness)
!!                 IF ( J .EQ. -7 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TTT, XXX, XXX, XXX, TI1, XXX, XXX, ICEP1, IERR)
!!                    ELSE
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TTT, XXX, XXX, XXX, TI1, XXX, XXX, ICEP1, IERR)
!!                    END IF
!!                    IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
!! ! IC2 : (in context of IC3, this is ice viscosity)
!!                 ELSE IF ( J .EQ. -6 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TTT, XXX, XXX, XXX, TI2, XXX, XXX, ICEP2, IERR)
!!                    ELSE
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TTT, XXX, XXX, XXX, TI2, XXX, XXX, ICEP2, IERR)
!!                    END IF
!!                    IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
!! ! IC3 : (in context of IC3, this is ice density)
!!                 ELSE IF ( J .EQ. -5 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TTT, XXX, XXX, XXX, TI3, XXX, XXX, ICEP3, IERR)
!!                    ELSE
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TTT, XXX, XXX, XXX, TI3, XXX, XXX, ICEP3, IERR)
!!                    END IF
!!                    IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
!! ! IC4 : (in context of IC3, this is ice modulus)
!!                 ELSE IF ( J .EQ. -4 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TTT, XXX, XXX, XXX, TI4, XXX, XXX, ICEP4, IERR)
!!                    ELSE
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TTT, XXX, XXX, XXX, TI4, XXX, XXX, ICEP4, IERR)
!!                    END IF
!!                    IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
!! ! IC5 : ice flow diam.
!!                 ELSE IF ( J .EQ. -3 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TTT, XXX, XXX, XXX, TI5, XXX, XXX, ICEP5, IERR)
!!                    ELSE
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TTT, XXX, XXX, XXX, TI5, XXX, XXX, ICEP5, IERR)
!!                    END IF
!!                    IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
!! ! MUD1 : mud density
!!                 ELSE IF ( J .EQ. -2 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TTT, XXX, XXX, XXX, TZN, XXX, XXX, MUDD, IERR)
!!                    ELSE
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TTT, XXX, XXX, XXX, TZN, XXX, XXX, MUDD, IERR)
!!                    END IF
!!                    IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
!! ! MUD2 : mud thickness
!!                 ELSE IF ( J .EQ. -1 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TTT, XXX, XXX, XXX, TTN, XXX, XXX, MUDT, IERR)
!!                    ELSE
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TTT, XXX, XXX, XXX, TTN, XXX, XXX, MUDT, IERR)
!!                    END IF
!!                    IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
!! ! MUD3 : mud viscosity
!!                 ELSE IF ( J .EQ. 0 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TTT, XXX, XXX, XXX, TVN, XXX, XXX, MUDV, IERR)
!!                    ELSE
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TTT, XXX, XXX, XXX, TVN, XXX, XXX, MUDV, IERR)
!!                    END IF
!!                    IF ( IERR .LT. 0 )FLLST_ALL(J) = .TRUE.
!! ! LEV : water levels
!!                 ELSE IF ( J .EQ. 1 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TTT, XXX, XXX, XXX, TLN, XXX, XXX, WLEV, IERR)
!!                    ELSE
!! !/TIDE                        IF ( FLLEVTIDE ) THEN 
!! !/TIDE                          IERR=0
!! !/TIDE                          IF ( TLN(1) .EQ. -1 ) THEN 
!! !/TIDE                            TLN = TIME 
!! !/TIDE                          ELSE 
!! !/TIDE                            CALL TICK21 ( TLN, TIDE_DT )
!! !/TIDE                            END IF
!! !/TIDE                        ELSE
!! !/OASIS                 COUPL_COMM = MPI_COMM
!! !/OASOCM                IF (.NOT.FLAGSC(J)) ID_OASIS_TIME = -1
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TTT, XXX, XXX, XXX, TLN, XXX, XXX, WLEV,   &
!!                            IERR                                       &
!! !/OASOCM                   , COUPL_COMM                               &
!!                            )
!! !/TIDE                          END IF
!!                    END IF
!!                    IF ( IERR .LT. 0 ) FLLSTL = .TRUE.
!! !could use this:   IF ( IERR .LT. 0 ) FLLST_ALL(J) = .TRUE.
!! ! CUR : currents
!!                 ELSE IF ( J .EQ. 2 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TC0, CX0, CY0, XXX, TCN, CXN, CYN, XXX, IERR)
!!                    ELSE
!! !/TIDE                        IF ( FLCURTIDE ) THEN 
!! !/TIDE                          IERR=0
!! !/TIDE                          IF ( TCN(1) .EQ. -1 ) THEN 
!! !/TIDE                            TCN = TIME 
!! !/TIDE                            END IF
!! !/TIDE                          TC0(:) = TCN(:)               
!! !/TIDE                          CALL TICK21 ( TCN, TIDE_DT )
!! !/TIDE                        ELSE
!! !/OASIS                 COUPL_COMM = MPI_COMM
!! !/OASOCM                IF (.NOT.FLAGSC(J)) ID_OASIS_TIME = -1
!! 
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TC0, CX0, CY0, XXX, TCN, CXN, CYN, XXX,    &
!!                            IERR                                       &
!! !/OASOCM                   , COUPL_COMM                               &
!!                            )
!! !/TIDE                          END IF
!!                    END IF
!! ! WND : winds
!!                 ELSE IF ( J .EQ. 3 ) THEN
!!                    IF ( FLH(J) ) THEN
!!                       CALL W3FLDH (J, NDST, NDSEN, NX, NY, NX, NY,    &
!!                            TIME0, TIMEN, NH(J), NHMAX, THO, HA, HD, HS,&
!!                            TW0, WX0, WY0, DT0, TWN, WXN, WYN, DTN, IERR)
!!                    ELSE
!! !/OASIS                 COUPL_COMM = MPI_COMM
!! !/OASACM                IF (.NOT.FLAGSC(J)) ID_OASIS_TIME = -1
!! !/NCC                        IF (.NOT.CFLAG(J)) THEN
!!                       CALL W3FLDG ('READ', IDSTR(J), NDSF(J),         &
!!                            NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN, &
!!                            TW0, WX0, WY0, DT0, TWN, WXN, WYN, DTN,    &
!!                            IERR                                       &
!! !/OASACM                   , COUPL_COMM                               &
!!                            )
!! !/NCC                        END IF
!! !/NCC                        CALL WW_CDETECT(CFLAG(J))
!! !/NCC                        IF ( IAPROC .EQ. NAPOUT .AND. DEBUG_NCC )     &
!! !/NCC                             WRITE(9753) TW0, TWN
!! !/NCC                        CALL WW_UPDATE_WIND(TW0,TWN,WX0,WY0,WXN,WYN)
!! !/NCC                        IF ( IAPROC .EQ. NAPOUT .AND. DEBUG_NCC )     &
!! !/NCC                             WRITE(9751) TW0, TWN, WX0, WY0, WXN, WYN
!!                       END IF
!! ! ICE : ice conc.
!!                 ELSE IF ( J .EQ. 4 ) THEN
!! !/NCC                    IF (.NOT.CFLAG(J)) THEN
!!                    CALL W3FLDG ('READ', IDSTR(J), NDSF(J),            &
!!                         NDST, NDSEN, NX, NY, NX, NY, TIME0, TIMEN,    &
!!                         TTT, XXX, XXX, XXX, TIN, XXX, BERGI, ICEI, IERR)
!!                    IF ( IERR .LT. 0 ) FLLSTI = .TRUE.
!! !could use this:   IF ( IERR .LT. 0 ) FLLST_ALL(J) = .TRUE.
!! !/NCC                    END IF
!! !/NCC                    CALL WW_CDETECT(CFLAG(J))
!! !/NCC                    IF ( IAPROC .EQ. NAPOUT .AND. DEBUG_NCC )    &
!! !/NCC                         WRITE(9753) TIN
!! !/NCC                    CALL WW_UPDATE_PSEUDOICE(TIN,ICEI)
!! !/NCC                    IF ( IAPROC .EQ. NAPOUT .AND. DEBUG_NCC )    &
!! !/NCC                         WRITE(9752) TIN, ICEI
!! ! Assim data
!!                 ELSE IF ( J .EQ. 5 ) THEN
!!                    CALL W3FLDD ('SIZE', IDSTR(J), NDSF(J), NDST,      &
!!                         NDSEN, TIME0, T0N, RCLD(J), NDT(J),           &
!!                         NDTNEW, DATA0, IERR )
!!                    IF ( IERR .LT. 0 ) THEN
!!                         INFLAGS1(J) = .FALSE.
!!                         IF ( ALLOCATED(DATA0) ) DEALLOCATE(DATA0)
!!                    ELSE
!!                         NDT(J) = NDTNEW
!!                         IF ( ALLOCATED(DATA0) ) DEALLOCATE(DATA0)
!!                         ALLOCATE ( DATA0(RCLD(J),NDT(J)) )
!!                         CALL W3FLDD ('READ', IDSTR(J), NDSF(J), NDST, &
!!                              NDSEN, TIME0, T0N, RCLD(J), NDT(J),      &
!!                              NDTNEW, DATA0, IERR )
!!                    END IF
!! ! Assim data
!!                 ELSE IF ( J .EQ. 6 ) THEN
!!                    CALL W3FLDD ('SIZE', IDSTR(J), NDSF(J), NDST,      &
!!                         NDSEN, TIME0, T1N, RCLD(J), NDT(J),           &
!!                         NDTNEW, DATA1, IERR )
!!                    IF ( IERR .LT. 0 ) THEN
!!                         INFLAGS1(J) = .FALSE.
!!                         IF ( ALLOCATED(DATA1) ) DEALLOCATE(DATA1)
!!                    ELSE
!!                         NDT(J) = NDTNEW
!!                         IF ( ALLOCATED(DATA1) ) DEALLOCATE(DATA1)
!!                         ALLOCATE ( DATA1(RCLD(J),NDT(J)) )
!!                         CALL W3FLDD ('READ', IDSTR(J), NDSF(J), NDST, &
!!                              NDSEN, TIME0, T1N, RCLD(J), NDT(J),      &
!!                              NDTNEW, DATA1, IERR )
!!                    END IF
!! ! Assim data
!!                 ELSE IF ( J .EQ. 7 ) THEN
!!                    CALL W3FLDD ('SIZE', IDSTR(J), NDSF(J), NDST,      &
!!                         NDSEN, TIME0, T2N, RCLD(J), NDT(J),           &
!!                         NDTNEW, DATA2, IERR )
!!                    IF ( IERR .LT. 0 ) THEN
!!                         INFLAGS1(J) = .FALSE.
!!                         IF ( ALLOCATED(DATA2) ) DEALLOCATE(DATA2)
!!                    ELSE
!!                         NDT(J) = NDTNEW
!!                         IF ( ALLOCATED(DATA2) ) DEALLOCATE(DATA2)
!!                         ALLOCATE ( DATA2(RCLD(J),NDT(J)) )
!!                         CALL W3FLDD ('READ', IDSTR(J), NDSF(J), NDST, &
!!                              NDSEN, TIME0, T2N, RCLD(J), NDT(J),      &
!!                              NDTNEW, DATA2, IERR )
!!                    END IF
!! ! Track
!!                 ELSE IF ( J .EQ. 8 ) THEN
!!                    CALL W3FLDM (4, NDST, NDSEN, TIME0, TIMEN, NH(4),  &
!!                            NHMAX, THO, HA, HD, TG0, GA0, GD0,         &
!!                            TGN, GAN, GDN, IERR)
!!                 END IF
!! !
!!                 IF ( IERR.GT.0 ) GOTO 2222
!!                 IF ( IERR.LT.0 .AND. IAPROC.EQ.NAPOUT )               &
!!                                  WRITE (NDSO,973) IDFLDS(J)
!! !
!!               END IF
!! !
!! ! 7.a.4 Update next ending time
!! !
!!             IF ( INFLAGS1(J) ) THEN
!!                 TTT    = TFN(:,J)
!!                 DTTST  = DSEC21 ( TTT , TTIME )
!!                 IF ( DTTST.GT.0. .AND. .NOT.                          &
!!                        ( (FLLSTL .AND. J.EQ.1) .OR.                   &
!!                          (FLLST_ALL(J) .AND. J.EQ.-7) .OR.            &
!!                          (FLLST_ALL(J) .AND. J.EQ.-6) .OR.            &
!!                          (FLLST_ALL(J) .AND. J.EQ.-5) .OR.            &
!!                          (FLLST_ALL(J) .AND. J.EQ.-4) .OR.            &
!!                          (FLLST_ALL(J) .AND. J.EQ.-3) .OR.            &
!!                          (FLLST_ALL(J) .AND. J.EQ.-2) .OR.            &
!!                          (FLLST_ALL(J) .AND. J.EQ.-1) .OR.            &
!!                          (FLLST_ALL(J) .AND. J.EQ.0 ) .OR.            &
!!                          (FLLSTI .AND. J.EQ.4) ) ) THEN
!!                     TTIME  = TTT
!! ! notes: if model has run out beyond field input, then this line should not 
!! !    be reached. 
!!                   END IF
!!               END IF
!! !
!!           END IF
!! !
!!         END DO ! J=JFIRST,8
!! !
!! ! update the next assimilation data time
!! 
!!       TDN = TTIME
!!       CALL TICK21 ( TDN, 1. )
!!       DO J=5, 7
!!         IF ( INFLAGS1(J) ) THEN
!!             TTT    = TFN(:,J)
!!             DTTST  = DSEC21 ( TTT , TDN )
!!             IF ( DTTST.GT.0. ) TDN = TTT
!!           END IF
!!         END DO
!! !
!! !/T      WRITE (NDST,9072) '0-N', TIME0, TTIME,           &
!! !/T                        IDSTR(-7), INFLAGS1(-7), TI1,     &
!! !/T                        IDSTR(-6), INFLAGS1(-6), TI2,     &
!! !/T                        IDSTR(-5), INFLAGS1(-5), TI3,     &
!! !/T                        IDSTR(-4), INFLAGS1(-4), TI4,     &
!! !/T                        IDSTR(-3), INFLAGS1(-3), TI5,     &
!! !/T                        IDSTR(-2), INFLAGS1(-2), TZN,     &
!! !/T                        IDSTR(-1), INFLAGS1(-1), TTN,     &
!! !/T                        IDSTR(0), INFLAGS1(0), TVN,       &
!! !/T                        IDSTR(1), INFLAGS1(1), TLN,       &
!! !/T                        IDSTR(2), INFLAGS1(2), TC0, TCN,  &
!! !/T                        IDSTR(3), INFLAGS1(3), TW0, TWN,  &
!! !/T                        IDSTR(4), INFLAGS1(4), TIN,       &
!! !/T                        IDSTR(5), INFLAGS1(5), T0N,       &
!! !/T                        IDSTR(6), INFLAGS1(6), T1N,       &
!! !/T                        IDSTR(7), INFLAGS1(7), T2N, TDN,  &
!! !/T                        IDSTR(8), INFLAGS1(8), TG0, TGN
!! !
!!       IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,*) ' '
!! !
!! ! 7.b Run the wave model for the given interval
!! !
!!       TIME0  = TTIME
!! 
!! !
!!       CALL W3WAVE ( 1, TIME0                                          &
!! !/OASIS             ,.TRUE., .FALSE., MPI_COMM                        &
!!                   )
!! !
!!       ! The following lines prevents us from trying to read past the end 
!!       ! of the files. This feature existed in v3.14.
!!       ! "1" is for water levels
!!       ! "4" is for ice concentration: 
!!       IF ( FLLSTL ) INFLAGS1(1) = .FALSE.
!!       IF ( FLLSTI ) INFLAGS1(4) = .FALSE.
!! 
!!       ! We include something like this for mud and ice parameters also:
!!       DO J=-7,0
!!          IF (FLLST_ALL(J))THEN
!!             INFLAGS1(J)=.FALSE.
!!          END IF
!!       END DO
!! 
!! !
!! ! 7.c Run data assimilation at ending time
!! !
!!       DTTST  = DSEC21 ( TIME , TDN )
!!       IF ( DTTST .EQ. 0 ) THEN
!!           CALL STME21 ( TIME0 , DTME21 )
!!           IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,975) DTME21
!! !
!!           FLGDAS(1) = DSEC21(TIME,T0N) .EQ. 0.
!!           FLGDAS(2) = DSEC21(TIME,T1N) .EQ. 0.
!!           FLGDAS(3) = DSEC21(TIME,T2N) .EQ. 0.
!! !
!!           CALL W3WDAS ( FLGDAS, RCLD, NDT, DATA0, DATA1, DATA2 )
!! !
!! ! 7.d Call wave model again after data assimilation for output only
!! !
!!           DTTST  = DSEC21 ( TIME , TIMEN )
!! 
!!           IF ( DTTST .EQ. 0. ) THEN
!!               IF ( IAPROC .EQ. NAPOUT ) WRITE (NDSO,*) ' '
!!               CALL W3WAVE ( 1, TIME0                                  & 
!! !/OASIS                     , .TRUE., .FALSE., MPI_COMM               &
!!                           )
!!             END IF
!!         END IF
!! !
!! ! 7.e Check times
!! !
!!       DTTST  = DSEC21 ( TIME0 , TIMEN )
!!       IF ( DTTST .GT. 0. ) GOTO 700
!! !
!! !--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!! !     End of shell
!! !
!!       GOTO 2222
!! !
!! ! Error escape locations
!! !
!!  2000 CONTINUE
!!       IF ( IAPROC .EQ. NAPERR ) WRITE (NDSE,1000) IERR
!!       GOTO 2222
!! !
!!  2001 CONTINUE
!!       IF ( IAPROC .EQ. NAPERR ) WRITE (NDSE,1001)
!!       GOTO 2222
!! !
!!  2002 CONTINUE
!!       IF ( IAPROC .EQ. NAPERR ) WRITE (NDSE,1002) IERR
!!       GOTO 2222
!! !
!!  2003 CONTINUE
!!       IF ( IAPROC .EQ. NAPERR ) WRITE (NDSE,1003)
!!       GOTO 2222
!! !
!!  2004 CONTINUE
!!       IF ( IAPROC .EQ. NAPERR ) WRITE (NDSE,1004)
!!       GOTO 2222
!! !
!!  2005 CONTINUE
!!       IF ( IAPROC .EQ. NAPERR ) WRITE (NDSE,1005) IDTST
!!       GOTO 2222
!! !
!!  2006 CONTINUE
!!       IF ( IAPROC .EQ. NAPERR ) WRITE (NDSE,1006) IDTST, NH(J)
!!       GOTO 2222
!! !
!!  2007 CONTINUE
!!       IF ( IAPROC .EQ. NAPERR ) WRITE (NDSE,1007)
!!       GOTO 2222
!! !
!!  2008 CONTINUE
!!       IF ( IAPROC .EQ. NAPERR ) WRITE (NDSE,1008) IERR
!!       GOTO 2222
!! !
!!  2222 CONTINUE
!! !
!! !/MPI      CALL MPI_BARRIER ( MPI_COMM, IERR_MPI )
!! !
!!       IF ( IAPROC .EQ. NAPOUT ) THEN
!! !/F90          CALL DATE_AND_TIME ( VALUES=CLKDT3 )
!! !/F90          CLKFIN = TDIFF ( CLKDT1,CLKDT2 )
!! !/F90          CLKFEL = TDIFF ( CLKDT1,CLKDT3 )
!! !/F90          WRITE (NDSO,997) CLKFIN
!! !/F90          WRITE (NDSO,998) CLKFEL
!! !/F90          IF ( NDSO .NE. NDS(1) ) THEN
!! !/F90              WRITE (NDS(1),997) CLKFIN
!! !/F90              WRITE (NDS(1),998) CLKFEL
!! !/F90            END IF
!!           WRITE (NDSO,999)
!!         END IF
!! !
!! !/NCO/!     IF ( IAPROC .EQ. 1 ) CALL W3TAGE('WAVEFCST')
!! !/OASIS IF (OASISED.EQ.1) THEN
!! !/OASIS        CALL CPL_OASIS_FINALIZE
!! !/OASIS ELSE
!! !/PALM  IF (PALMED.EQ.0) THEN 
!! !/MPI      CALL MPI_FINALIZE  ( IERR_MPI )
!! !/PALM  ENDIF
!! !/OASIS END IF
!! !
!! !
!! ! Formats
!! !
!!   900 FORMAT (/15X,'      *** WAVEWATCH III Program shell ***      '/ &
!!                15X,'==============================================='/)
!!   901 FORMAT ( '  Comment character is ''',A,''''/)
!! !
!!   920 FORMAT (/'  Input fields : '/                                   &
!!                ' --------------------------------------------------')
!!   921 FORMAT ( '       ',A,2X,A,2X,A)
!!   922 FORMAT ( ' ' )
!! !
!!   930 FORMAT (/'  Time interval : '/                                  &
!!                ' --------------------------------------------------')
!!   931 FORMAT ( '       Starting time : ',A)
!!   932 FORMAT ( '       Ending time   : ',A/)
!! !
!!   940 FORMAT (/'  Output requests : '/                                &
!!                ' --------------------------------------------------'/ &
!!                '       ',A)
!!   941 FORMAT (/'       Type',I2,' : ',A/                              &
!!                '      -----------------------------------------')
!!   942 FORMAT ( '            From     : ',A)
!!   943 FORMAT ( '            To       : ',A)
!!  1944 FORMAT ( '            Interval : ', 8X,A11/)
!!  2944 FORMAT ( '            Interval : ', 9X,A10/)
!!  3944 FORMAT ( '            Interval : ',11X,A8/)
!!  1945 FORMAT ( '            Fields   : ',A)
!!  2945 FORMAT ( '            Point  1 : ',2F8.2,2X,A)
!!  2955 FORMAT ( '            Point  1 : ',2(F8.1,'E3'),2X,A)
!!  2946 FORMAT ( '              ',I6,' : ',2F8.2,2X,A)
!!  2956 FORMAT ( '              ',I6,' : ',2(F8.1,'E3'),2X,A)
!!  2947 FORMAT ( '            No points defined')
!!  3945 FORMAT ( '            The file with ',A,' data is ',A,'.')
!!  6945 FORMAT ( '            IX first,last,inc :',3I5/                 &
!!                '            IY first,last,inc :',3I5/                 &
!!                '            Formatted file    :    ',A)
!!  8945 FORMAT ( '            Dates out of run dates : output ', A,     &
!!                ' deactivated')
!! !
!!   950 FORMAT (/'  Initializations :'/                                 &
!!                ' --------------------------------------------------')
!!   951 FORMAT ( '       ',A)
!! !/O7  952 FORMAT ( '       ',I6,2X,A)
!! !/O7  953 FORMAT ( '          ',I6,I11.8,I7.6,3E12.4)
!!   954 FORMAT ( '            ',A,': file not needed')
!!   955 FORMAT ( '            ',A,': file OK')
!!   956 FORMAT ( '            ',A,': file OK, recl =',I3,               &
!!                '  undef = ',E10.3)
!! !
!!   960 FORMAT (/'  Running model without input fields'/                &
!!                ' --------------------------------------------------'/)
!! !
!!   970 FORMAT (/'  Running model with input fields'/                   &
!!                ' --------------------------------------------------')
!!   971 FORMAT (/'  Updating input at ',A)
!!   972 FORMAT ( '     Updating ',A)
!!   973 FORMAT ( '        Past last ',A)
!! !/TIDE  974 FORMAT ( '     Updating ',A,'using tidal constituents')
!!   975 FORMAT (/'  Data assimmilation at ',A)
!! !
!! !/F90  997 FORMAT (/'  Initialization time :',F10.2,' s')
!! !/F90  998 FORMAT ( '  Elapsed time        :',F10.2,' s')
!! !
!!   999 FORMAT(//'  End of program '/                                   &
!!                ' ===================================='/               &
!!                '         WAVEWATCH III Program shell '/)
!! !
!!  1000 FORMAT (/' *** WAVEWATCH III ERROR IN W3SHEL : '/               &
!!                '     ERROR IN OPENING INPUT FILE'/                    &
!!                '     IOSTAT =',I5/)
!! !
!!  1001 FORMAT (/' *** WAVEWATCH III ERROR IN W3SHEL : '/               &
!!                '     PREMATURE END OF INPUT FILE'/)
!! !
!!  1002 FORMAT (/' *** WAVEWATCH III ERROR IN W3SHEL : '/               &
!!                '     ERROR IN READING FROM INPUT FILE'/               &
!!                '     IOSTAT =',I5/)
!! !
!!  1003 FORMAT (/' *** WAVEWATCH III ERROR IN W3SHEL : '/               &
!!                '     ILLEGAL TIME INTERVAL'/)
!! !
!!  1004 FORMAT (/' *** WAVEWATCH III ERROR IN W3SHEL : '/               &
!!                '     POINT OUTPUT ACTIVATED, BUT NO POINTS DEFINED'/)
!! !
!!  1005 FORMAT (/' *** WAVEWATCH III ERROR IN W3SHEL : '/               &
!!                '     ILLEGAL ID STRING HOMOGENEOUS FIELD : ',A/)
!! !
!!  1006 FORMAT (/' *** WAVEWATCH III ERROR IN W3SHEL : '/               &
!!                '     TOO MANY HOMOGENEOUS FIELDS : ',A,1X,I4/)
!! !
!!  1007 FORMAT (/' *** WAVEWATCH III ERROR IN W3SHEL : '/               &
!!                '     INSUFFICIENT DATA FOR HOMOGENEOUS FIELDS'/)
!! !
!!  1008 FORMAT (/' *** WAVEWATCH III ERROR IN W3SHEL : '/               &
!!                '     ERROR IN OPENING OUTPUT FILE'/                   &
!!                '     IOSTAT =',I5/)
!! !
!! !/T 9000 FORMAT ( ' TEST W3SHEL : UNIT NUMBERS  :',12I4)
!! !/T 9001 FORMAT ( ' TEST W3SHEL : SUBR. TRACING :',2I4)
!! !
!! !/T 9020 FORMAT ( ' TEST W3SHEL : FLAGS DEF / HOM  : ',9L2,2X,9L2)
!! !
!! !/T 9040 FORMAT ( ' TEST W3SHEL : ODAT   : ',I9.8,I7.6,I7,I9.8,I7.6,  &
!! !/T                                   4(/24X,I9.8,I7.6,I7,I9.8,I7.6) )
!! !/T 9041 FORMAT ( ' TEST W3SHEL : FLGRD  : ',20L2)
!! !/T 9042 FORMAT ( ' TEST W3SHEL : IPR, PRFRM : ',6I6,1X,L1)
!! !
!! !/T 9070 FORMAT ( ' TEST W3SHEL : ',A,3X,2(I10.8,I7.6)/                &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/             &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/             &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/             &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/             &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/             &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/             &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/             &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/             &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/             &
!! !/T               '               ',A,L3,2(I10.8,I7.6)/                &
!! !/T               '               ',A,L3,2(I10.8,I7.6)/                &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/             &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/             &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/             &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/             &
!! !/T               '               ',A,L3,2(I10.8,I7.6))
!! !/T 9071 FORMAT ( ' TEST W3SHEL : ',A,', DTTST = ',E10.3)
!! !/T 9072 FORMAT ( ' TEST W3SHEL : ',A,3X,2(I10.8,I7.6)/               &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/            &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/            &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/            &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/            &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/            &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/            &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/            &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/            &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/            &
!! !/T               '               ',A,L3,2(I10.8,I7.6)/               &
!! !/T               '               ',A,L3,2(I10.8,I7.6)/               &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/            &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/            &
!! !/T               '               ',A,L3,17X,(I10.8,I7.6)/            &
!! !/T               '               ',A,L3,17X,2(I10.8,I7.6)/           &
!! !/T               '               ',A,L3,2(I10.8,I7.6))
!! !/
!! !/ End of W3SHEL ----------------------------------------------------- /
!! !/
      END SUBROUTINE W3_RUN

      END MODULE WW3_ESMF
!/ ------------------------------------------------------------------- /
